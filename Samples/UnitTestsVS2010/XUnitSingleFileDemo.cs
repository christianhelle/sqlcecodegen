
/*
	This code was generated by SQL Compact Code Generator version 1.3.0.0

	SQL Compact Code Generator was written by Christian Resma Helle (http://sqlcecodegen.codeplex.com)
	and is under the GNU General Public License version 2 (GPLv2)

	Generated: 11/16/2011 01:21:36
*/


using SampleAppVS2010.SingleFileDemo;

namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using Xunit;

	
	public class ContactEntityTest
	{
		[Fact]
		public void IdTest()
		{
			var value = new System.Int32();
			var target = new Contact();
			target.Id = value;

			Assert.Equal(value, target.Id);
		}

		[Fact]
		public void IdNullTest()
		{
			var target = new Contact();
			target.Id = null;

			Assert.Equal(null, target.Id);
		}

		[Fact]
		public void NameTest()
		{
			var value = string.Empty;
			var target = new Contact();
			target.Name = value;

			Assert.Equal(value, target.Name);
		}

		[Fact]
		public void NameNullTest()
		{
			var target = new Contact();
			target.Name = null;

			Assert.Equal(null, target.Name);
		}

		[Fact]
		public void NameMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Contact();
			target.Name = value;

			Assert.Equal(value, target.Name);
		}

		[Fact]
		public void NameMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Contact();
				target.Name = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void AddressTest()
		{
			var value = string.Empty;
			var target = new Contact();
			target.Address = value;

			Assert.Equal(value, target.Address);
		}

		[Fact]
		public void AddressNullTest()
		{
			var target = new Contact();
			target.Address = null;

			Assert.Equal(null, target.Address);
		}

		[Fact]
		public void AddressMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Contact();
			target.Address = value;

			Assert.Equal(value, target.Address);
		}

		[Fact]
		public void AddressMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Contact();
				target.Address = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void CityTest()
		{
			var value = string.Empty;
			var target = new Contact();
			target.City = value;

			Assert.Equal(value, target.City);
		}

		[Fact]
		public void CityNullTest()
		{
			var target = new Contact();
			target.City = null;

			Assert.Equal(null, target.City);
		}

		[Fact]
		public void CityMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Contact();
			target.City = value;

			Assert.Equal(value, target.City);
		}

		[Fact]
		public void CityMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Contact();
				target.City = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void PostalCodeTest()
		{
			var value = string.Empty;
			var target = new Contact();
			target.PostalCode = value;

			Assert.Equal(value, target.PostalCode);
		}

		[Fact]
		public void PostalCodeNullTest()
		{
			var target = new Contact();
			target.PostalCode = null;

			Assert.Equal(null, target.PostalCode);
		}

		[Fact]
		public void PostalCodeMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Contact();
			target.PostalCode = value;

			Assert.Equal(value, target.PostalCode);
		}

		[Fact]
		public void PostalCodeMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Contact();
				target.PostalCode = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void CountryTest()
		{
			var value = string.Empty;
			var target = new Contact();
			target.Country = value;

			Assert.Equal(value, target.Country);
		}

		[Fact]
		public void CountryNullTest()
		{
			var target = new Contact();
			target.Country = null;

			Assert.Equal(null, target.Country);
		}

		[Fact]
		public void CountryMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Contact();
			target.Country = value;

			Assert.Equal(value, target.Country);
		}

		[Fact]
		public void CountryMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Contact();
				target.Country = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void EmailTest()
		{
			var value = string.Empty;
			var target = new Contact();
			target.Email = value;

			Assert.Equal(value, target.Email);
		}

		[Fact]
		public void EmailNullTest()
		{
			var target = new Contact();
			target.Email = null;

			Assert.Equal(null, target.Email);
		}

		[Fact]
		public void EmailMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Contact();
			target.Email = value;

			Assert.Equal(value, target.Email);
		}

		[Fact]
		public void EmailMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Contact();
				target.Email = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void PhoneTest()
		{
			var value = string.Empty;
			var target = new Contact();
			target.Phone = value;

			Assert.Equal(value, target.Phone);
		}

		[Fact]
		public void PhoneNullTest()
		{
			var target = new Contact();
			target.Phone = null;

			Assert.Equal(null, target.Phone);
		}

		[Fact]
		public void PhoneMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Contact();
			target.Phone = value;

			Assert.Equal(value, target.Phone);
		}

		[Fact]
		public void PhoneMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Contact();
				target.Phone = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

	}
}


namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using Xunit;

	
	public class CustomerEntityTest
	{
		[Fact]
		public void IdTest()
		{
			var value = new System.Int32();
			var target = new Customer();
			target.Id = value;

			Assert.Equal(value, target.Id);
		}

		[Fact]
		public void IdNullTest()
		{
			var target = new Customer();
			target.Id = null;

			Assert.Equal(null, target.Id);
		}

		[Fact]
		public void ContactIdTest()
		{
			var value = new System.Int32();
			var target = new Customer();
			target.ContactId = value;

			Assert.Equal(value, target.ContactId);
		}

		[Fact]
		public void ContactIdNullTest()
		{
			var target = new Customer();
			target.ContactId = null;

			Assert.Equal(null, target.ContactId);
		}

		[Fact]
		public void NameTest()
		{
			var value = string.Empty;
			var target = new Customer();
			target.Name = value;

			Assert.Equal(value, target.Name);
		}

		[Fact]
		public void NameNullTest()
		{
			var target = new Customer();
			target.Name = null;

			Assert.Equal(null, target.Name);
		}

		[Fact]
		public void NameMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Customer();
			target.Name = value;

			Assert.Equal(value, target.Name);
		}

		[Fact]
		public void NameMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Customer();
				target.Name = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void AddressTest()
		{
			var value = string.Empty;
			var target = new Customer();
			target.Address = value;

			Assert.Equal(value, target.Address);
		}

		[Fact]
		public void AddressNullTest()
		{
			var target = new Customer();
			target.Address = null;

			Assert.Equal(null, target.Address);
		}

		[Fact]
		public void AddressMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Customer();
			target.Address = value;

			Assert.Equal(value, target.Address);
		}

		[Fact]
		public void AddressMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Customer();
				target.Address = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void CityTest()
		{
			var value = string.Empty;
			var target = new Customer();
			target.City = value;

			Assert.Equal(value, target.City);
		}

		[Fact]
		public void CityNullTest()
		{
			var target = new Customer();
			target.City = null;

			Assert.Equal(null, target.City);
		}

		[Fact]
		public void CityMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Customer();
			target.City = value;

			Assert.Equal(value, target.City);
		}

		[Fact]
		public void CityMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Customer();
				target.City = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void PostalCodeTest()
		{
			var value = string.Empty;
			var target = new Customer();
			target.PostalCode = value;

			Assert.Equal(value, target.PostalCode);
		}

		[Fact]
		public void PostalCodeNullTest()
		{
			var target = new Customer();
			target.PostalCode = null;

			Assert.Equal(null, target.PostalCode);
		}

		[Fact]
		public void PostalCodeMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Customer();
			target.PostalCode = value;

			Assert.Equal(value, target.PostalCode);
		}

		[Fact]
		public void PostalCodeMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Customer();
				target.PostalCode = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void CountryTest()
		{
			var value = string.Empty;
			var target = new Customer();
			target.Country = value;

			Assert.Equal(value, target.Country);
		}

		[Fact]
		public void CountryNullTest()
		{
			var target = new Customer();
			target.Country = null;

			Assert.Equal(null, target.Country);
		}

		[Fact]
		public void CountryMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Customer();
			target.Country = value;

			Assert.Equal(value, target.Country);
		}

		[Fact]
		public void CountryMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Customer();
				target.Country = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void EmailTest()
		{
			var value = string.Empty;
			var target = new Customer();
			target.Email = value;

			Assert.Equal(value, target.Email);
		}

		[Fact]
		public void EmailNullTest()
		{
			var target = new Customer();
			target.Email = null;

			Assert.Equal(null, target.Email);
		}

		[Fact]
		public void EmailMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Customer();
			target.Email = value;

			Assert.Equal(value, target.Email);
		}

		[Fact]
		public void EmailMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Customer();
				target.Email = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void PhoneTest()
		{
			var value = string.Empty;
			var target = new Customer();
			target.Phone = value;

			Assert.Equal(value, target.Phone);
		}

		[Fact]
		public void PhoneNullTest()
		{
			var target = new Customer();
			target.Phone = null;

			Assert.Equal(null, target.Phone);
		}

		[Fact]
		public void PhoneMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Customer();
			target.Phone = value;

			Assert.Equal(value, target.Phone);
		}

		[Fact]
		public void PhoneMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Customer();
				target.Phone = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void FaxTest()
		{
			var value = string.Empty;
			var target = new Customer();
			target.Fax = value;

			Assert.Equal(value, target.Fax);
		}

		[Fact]
		public void FaxNullTest()
		{
			var target = new Customer();
			target.Fax = null;

			Assert.Equal(null, target.Fax);
		}

		[Fact]
		public void FaxMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Customer();
			target.Fax = value;

			Assert.Equal(value, target.Fax);
		}

		[Fact]
		public void FaxMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Customer();
				target.Fax = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

	}
}


namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using Xunit;

	
	public class ProductEntityTest
	{
		[Fact]
		public void IdTest()
		{
			var value = new System.Int32();
			var target = new Product();
			target.Id = value;

			Assert.Equal(value, target.Id);
		}

		[Fact]
		public void IdNullTest()
		{
			var target = new Product();
			target.Id = null;

			Assert.Equal(null, target.Id);
		}

		[Fact]
		public void PartNumberTest()
		{
			var value = string.Empty;
			var target = new Product();
			target.PartNumber = value;

			Assert.Equal(value, target.PartNumber);
		}

		[Fact]
		public void PartNumberNullTest()
		{
			var target = new Product();
			target.PartNumber = null;

			Assert.Equal(null, target.PartNumber);
		}

		[Fact]
		public void PartNumberMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Product();
			target.PartNumber = value;

			Assert.Equal(value, target.PartNumber);
		}

		[Fact]
		public void PartNumberMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Product();
				target.PartNumber = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void Ean13Test()
		{
			var value = string.Empty;
			var target = new Product();
			target.Ean13 = value;

			Assert.Equal(value, target.Ean13);
		}

		[Fact]
		public void Ean13NullTest()
		{
			var target = new Product();
			target.Ean13 = null;

			Assert.Equal(null, target.Ean13);
		}

		[Fact]
		public void Ean13MaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Product();
			target.Ean13 = value;

			Assert.Equal(value, target.Ean13);
		}

		[Fact]
		public void Ean13MaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Product();
				target.Ean13 = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void NameTest()
		{
			var value = string.Empty;
			var target = new Product();
			target.Name = value;

			Assert.Equal(value, target.Name);
		}

		[Fact]
		public void NameNullTest()
		{
			var target = new Product();
			target.Name = null;

			Assert.Equal(null, target.Name);
		}

		[Fact]
		public void NameMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Product();
			target.Name = value;

			Assert.Equal(value, target.Name);
		}

		[Fact]
		public void NameMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Product();
				target.Name = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void DescriptionTest()
		{
			var value = string.Empty;
			var target = new Product();
			target.Description = value;

			Assert.Equal(value, target.Description);
		}

		[Fact]
		public void DescriptionNullTest()
		{
			var target = new Product();
			target.Description = null;

			Assert.Equal(null, target.Description);
		}

		[Fact]
		public void DescriptionMaxLengthTest()
		{
			var value = RandomGenerator.GenerateString(100);
			var target = new Product();
			target.Description = value;

			Assert.Equal(value, target.Description);
		}

		[Fact]
		public void DescriptionMaxLengthArgumentExceptionTest()
		{
			try
			{
				var value = RandomGenerator.GenerateString(101);
				var target = new Product();
				target.Description = value;
				Assert.True(false, "ArgumentException expected");
			}
			catch (System.ArgumentException) { }
			catch (System.Exception)
			{
				Assert.True(false, "ArgumentException expected");
			}
		}

		[Fact]
		public void RatingTest()
		{
			var value = new System.Decimal();
			var target = new Product();
			target.Rating = value;

			Assert.Equal(value, target.Rating);
		}

		[Fact]
		public void RatingNullTest()
		{
			var target = new Product();
			target.Rating = null;

			Assert.Equal(null, target.Rating);
		}

	}
}


namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using Xunit;

	
	public class StockEntityTest
	{
		[Fact]
		public void IdTest()
		{
			var value = new System.Int32();
			var target = new Stock();
			target.Id = value;

			Assert.Equal(value, target.Id);
		}

		[Fact]
		public void IdNullTest()
		{
			var target = new Stock();
			target.Id = null;

			Assert.Equal(null, target.Id);
		}

		[Fact]
		public void ProductIdTest()
		{
			var value = new System.Int32();
			var target = new Stock();
			target.ProductId = value;

			Assert.Equal(value, target.ProductId);
		}

		[Fact]
		public void ProductIdNullTest()
		{
			var target = new Stock();
			target.ProductId = null;

			Assert.Equal(null, target.ProductId);
		}

		[Fact]
		public void QuantityTest()
		{
			var value = new System.Int32();
			var target = new Stock();
			target.Quantity = value;

			Assert.Equal(value, target.Quantity);
		}

		[Fact]
		public void QuantityNullTest()
		{
			var target = new Stock();
			target.Quantity = null;

			Assert.Equal(null, target.Quantity);
		}

		[Fact]
		public void LastUpdatedTest()
		{
			var value = new System.DateTime();
			var target = new Stock();
			target.LastUpdated = value;

			Assert.Equal(value, target.LastUpdated);
		}

		[Fact]
		public void LastUpdatedNullTest()
		{
			var target = new Stock();
			target.LastUpdated = null;

			Assert.Equal(null, target.LastUpdated);
		}

	}
}

namespace UnitTestsVS2010.XUnitSingleFileDemo
{

    internal static class RandomGenerator
    {
        const string PWD_CHARSET = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVXYZ1234567890";

        public static string GenerateString(int len)
        {
            if (len > 4000) len = 4000;
            var buffer = new byte[len * 2];
            new System.Security.Cryptography.RNGCryptoServiceProvider().GetBytes(buffer);

            using (var stream = new System.IO.MemoryStream(buffer, 0, buffer.Length, false, false))
            using (var reader = new System.IO.BinaryReader(stream))
            {
                var builder = new System.Text.StringBuilder(buffer.Length, buffer.Length);
                while (len-- > 0)
                {
                    var i = (reader.ReadUInt16() & 8) % PWD_CHARSET.Length;
                    builder.Append(PWD_CHARSET[i]);
                }
                return builder.ToString();
            }
        }
    }
}


namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using Xunit;

	
	public class DataAccessTestBase
	{
		public DataAccessTestBase()
		{
			var databaseFile = @"C:\Users\Christian\AppData\Local\SQLCE Code Generator\XUnitSingleFileDemo.sdf_" + System.Guid.NewGuid().ToString().Replace("{", string.Empty).Replace("}", string.Empty) + ".sdf";
			EntityBase.ConnectionString = "Data Source='" + databaseFile + "'";
			if (System.IO.File.Exists(databaseFile)) return;
			try { DatabaseFile.CreateDatabase(); } catch {}
		}

        protected static DataAccessRandomGenerator RandomGenerator = new DataAccessRandomGenerator();

        protected class DataAccessRandomGenerator
        {
            const string PWD_CHARSET = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVXYZ1234567890";

            public string GenerateString(int len)
            {
                if (len > 4000) len = 4000;
                var buffer = new byte[len * 2];
                new System.Security.Cryptography.RNGCryptoServiceProvider().GetBytes(buffer);

                using (var stream = new System.IO.MemoryStream(buffer, 0, buffer.Length, false, false))
                using (var reader = new System.IO.BinaryReader(stream))
                {
                    var builder = new System.Text.StringBuilder(buffer.Length, buffer.Length);
                    while (len-- > 0)
                    {
                        var i = (reader.ReadUInt16() & 8) % PWD_CHARSET.Length;
                        builder.Append(PWD_CHARSET[i]);
                    }
                    return builder.ToString();
                }
            }
        }
	}
}

namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using Xunit;

	
	public class EntityBaseTest : DataAccessTestBase
	{
		[Fact]
		public void CreateCommandTest()
		{
			Assert.NotNull(EntityBase.CreateCommand());
		}

		[Fact]
		public void ConnectionIsOpenTest()
		{
			var expected = System.Data.ConnectionState.Open;
			var actual = EntityBase.Connection.State;
			Assert.Equal(expected, actual);
		}
	}
}

namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using Xunit;

	
	public class DatabaseFileTest : DataAccessTestBase
	{
		[Fact]
		public void CreateDatabaseTest()
		{
			var databaseFile = @"C:\Users\Christian\AppData\Local\SQLCE Code Generator\XUnitSingleFileDemo.sdf_" + System.Guid.NewGuid().ToString().Replace("{", string.Empty).Replace("}", string.Empty) + ".sdf";
			EntityBase.ConnectionString = "Data Source='" + databaseFile + "'";
			EntityBase.Connection.Dispose();
			EntityBase.Connection = null;

			var actual = DatabaseFile.CreateDatabase();
			Assert.NotEqual(0, actual);

			EntityBase.ConnectionString = @"Data Source='C:\Users\Christian\AppData\Local\SQLCE Code Generator\XUnitSingleFileDemo.sdf'";
			EntityBase.Connection.Dispose();
			EntityBase.Connection = null;
		}
	}
}

namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using Xunit;

	
	public class ContactDataAccessTest : DataAccessTestBase
	{
		[Fact]
		public void CreateTest()
		{
			PurgeTest();
			IContactRepository target = new ContactRepository();
			var actual = new Contact
			{
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
		}

		[Fact]
		public void CreateWithParametersTest()
		{
			PurgeTest();
			IContactRepository target = new ContactRepository();
			target.Create(RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100));
		}

		[Fact]
		public void ToListTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var actual = target.ToList();
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void ToArrayTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var actual = target.ToArray();
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void ToListWithTopTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var actual = target.ToList(10);
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void ToArrayWithTopTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var actual = target.ToArray(10);
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByIdTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectById(record.Id);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByNameTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByName(record.Name);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByAddressTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByAddress(record.Address);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByCityTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByCity(record.City);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByPostalCodeTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByPostalCode(record.PostalCode);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByCountryTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByCountry(record.Country);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByEmailTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByEmail(record.Email);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByPhoneTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByPhone(record.Phone);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByIdWithTopTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectById(record.Id, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByNameWithTopTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByName(record.Name, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByAddressWithTopTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByAddress(record.Address, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByCityWithTopTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByCity(record.City, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByPostalCodeWithTopTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByPostalCode(record.PostalCode, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByCountryWithTopTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByCountry(record.Country, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByEmailWithTopTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByEmail(record.Email, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByPhoneWithTopTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByPhone(record.Phone, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void DeleteTest()
		{
			PurgeTest();
			IContactRepository target = new ContactRepository();
			var actual = new Contact
			{
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.Delete(actual);
		}

		[Fact]
		public void DeleteManyTest()
		{
			PopulateTest();
			IContactRepository target = new ContactRepository();
			var actual = target.ToList();
			target.Delete(actual);
		}

		[Fact]
		public void DeleteByIdTest()
		{
			PurgeTest();
			IContactRepository target = new ContactRepository();
			var actual = new Contact
			{
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteById(actual.Id);
		}

		[Fact]
		public void DeleteByNameTest()
		{
			PurgeTest();
			IContactRepository target = new ContactRepository();
			var actual = new Contact
			{
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByName(actual.Name);
		}

		[Fact]
		public void DeleteByAddressTest()
		{
			PurgeTest();
			IContactRepository target = new ContactRepository();
			var actual = new Contact
			{
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByAddress(actual.Address);
		}

		[Fact]
		public void DeleteByCityTest()
		{
			PurgeTest();
			IContactRepository target = new ContactRepository();
			var actual = new Contact
			{
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByCity(actual.City);
		}

		[Fact]
		public void DeleteByPostalCodeTest()
		{
			PurgeTest();
			IContactRepository target = new ContactRepository();
			var actual = new Contact
			{
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByPostalCode(actual.PostalCode);
		}

		[Fact]
		public void DeleteByCountryTest()
		{
			PurgeTest();
			IContactRepository target = new ContactRepository();
			var actual = new Contact
			{
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByCountry(actual.Country);
		}

		[Fact]
		public void DeleteByEmailTest()
		{
			PurgeTest();
			IContactRepository target = new ContactRepository();
			var actual = new Contact
			{
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByEmail(actual.Email);
		}

		[Fact]
		public void DeleteByPhoneTest()
		{
			PurgeTest();
			IContactRepository target = new ContactRepository();
			var actual = new Contact
			{
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByPhone(actual.Phone);
		}

		[Fact]
		public void PurgeTest()
		{
			IContactRepository target = new ContactRepository();
			target.Purge();
			var actual = target.ToList();
			Assert.Null(actual);
		}

		[Fact]
		public void UpdateTest()
		{
			IContactRepository target = new ContactRepository();
			var actual = target.ToList();
			var item = actual[0];
			target.Update(item);
		}

		[Fact]
		public void UpdateManyTest()
		{
			PopulateTest();
			IContactRepository target = new ContactRepository();
			var actual = target.ToList();
			target.Update(actual);
		}

		[Fact]
		public void PopulateTest()
		{
			PurgeTest();
			IContactRepository target = new ContactRepository();
			var actual = new System.Collections.Generic.List<Contact>();
			for (int i = 0; i < 10; i++)
				actual.Add(new Contact
				{
					Name = RandomGenerator.GenerateString(100),
					Address = RandomGenerator.GenerateString(100),
					City = RandomGenerator.GenerateString(100),
					PostalCode = RandomGenerator.GenerateString(100),
					Country = RandomGenerator.GenerateString(100),
					Email = RandomGenerator.GenerateString(100),
					Phone = RandomGenerator.GenerateString(100)
				});
			target.Create(actual);
		}

		[Fact]
		public void CountTest()
		{
			CreateTest();
			IContactRepository target = new ContactRepository();
			var actual = target.Count();
			Assert.NotEqual(0, actual);
		}

	}
}

namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using Xunit;

	
	public class CustomerDataAccessTest : DataAccessTestBase
	{
		[Fact]
		public void CreateTest()
		{
			PurgeTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = new Customer
			{
				ContactId = new System.Random().Next(1, 1000),
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100),
				Fax = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
		}

		[Fact]
		public void CreateWithParametersTest()
		{
			PurgeTest();
			ICustomerRepository target = new CustomerRepository();
			target.Create(new System.Random().Next(1, 1000), RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100));
		}

		[Fact]
		public void ToListTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = target.ToList();
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void ToArrayTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = target.ToArray();
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void ToListWithTopTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = target.ToList(10);
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void ToArrayWithTopTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = target.ToArray(10);
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByIdTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectById(record.Id);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByContactIdTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByContactId(record.ContactId);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByNameTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByName(record.Name);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByAddressTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByAddress(record.Address);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByCityTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByCity(record.City);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByPostalCodeTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByPostalCode(record.PostalCode);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByCountryTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByCountry(record.Country);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByEmailTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByEmail(record.Email);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByPhoneTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByPhone(record.Phone);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByFaxTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByFax(record.Fax);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByIdWithTopTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectById(record.Id, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByContactIdWithTopTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByContactId(record.ContactId, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByNameWithTopTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByName(record.Name, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByAddressWithTopTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByAddress(record.Address, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByCityWithTopTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByCity(record.City, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByPostalCodeWithTopTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByPostalCode(record.PostalCode, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByCountryWithTopTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByCountry(record.Country, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByEmailWithTopTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByEmail(record.Email, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByPhoneWithTopTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByPhone(record.Phone, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByFaxWithTopTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByFax(record.Fax, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void DeleteTest()
		{
			PurgeTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = new Customer
			{
				ContactId = new System.Random().Next(1, 1000),
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100),
				Fax = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.Delete(actual);
		}

		[Fact]
		public void DeleteManyTest()
		{
			PopulateTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = target.ToList();
			target.Delete(actual);
		}

		[Fact]
		public void DeleteByIdTest()
		{
			PurgeTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = new Customer
			{
				ContactId = new System.Random().Next(1, 1000),
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100),
				Fax = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteById(actual.Id);
		}

		[Fact]
		public void DeleteByContactIdTest()
		{
			PurgeTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = new Customer
			{
				ContactId = new System.Random().Next(1, 1000),
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100),
				Fax = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByContactId(actual.ContactId);
		}

		[Fact]
		public void DeleteByNameTest()
		{
			PurgeTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = new Customer
			{
				ContactId = new System.Random().Next(1, 1000),
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100),
				Fax = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByName(actual.Name);
		}

		[Fact]
		public void DeleteByAddressTest()
		{
			PurgeTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = new Customer
			{
				ContactId = new System.Random().Next(1, 1000),
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100),
				Fax = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByAddress(actual.Address);
		}

		[Fact]
		public void DeleteByCityTest()
		{
			PurgeTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = new Customer
			{
				ContactId = new System.Random().Next(1, 1000),
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100),
				Fax = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByCity(actual.City);
		}

		[Fact]
		public void DeleteByPostalCodeTest()
		{
			PurgeTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = new Customer
			{
				ContactId = new System.Random().Next(1, 1000),
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100),
				Fax = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByPostalCode(actual.PostalCode);
		}

		[Fact]
		public void DeleteByCountryTest()
		{
			PurgeTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = new Customer
			{
				ContactId = new System.Random().Next(1, 1000),
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100),
				Fax = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByCountry(actual.Country);
		}

		[Fact]
		public void DeleteByEmailTest()
		{
			PurgeTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = new Customer
			{
				ContactId = new System.Random().Next(1, 1000),
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100),
				Fax = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByEmail(actual.Email);
		}

		[Fact]
		public void DeleteByPhoneTest()
		{
			PurgeTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = new Customer
			{
				ContactId = new System.Random().Next(1, 1000),
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100),
				Fax = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByPhone(actual.Phone);
		}

		[Fact]
		public void DeleteByFaxTest()
		{
			PurgeTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = new Customer
			{
				ContactId = new System.Random().Next(1, 1000),
				Name = RandomGenerator.GenerateString(100),
				Address = RandomGenerator.GenerateString(100),
				City = RandomGenerator.GenerateString(100),
				PostalCode = RandomGenerator.GenerateString(100),
				Country = RandomGenerator.GenerateString(100),
				Email = RandomGenerator.GenerateString(100),
				Phone = RandomGenerator.GenerateString(100),
				Fax = RandomGenerator.GenerateString(100)
			};
			target.Create(actual);
			target.DeleteByFax(actual.Fax);
		}

		[Fact]
		public void PurgeTest()
		{
			ICustomerRepository target = new CustomerRepository();
			target.Purge();
			var actual = target.ToList();
			Assert.Null(actual);
		}

		[Fact]
		public void UpdateTest()
		{
			ICustomerRepository target = new CustomerRepository();
			var actual = target.ToList();
			var item = actual[0];
			target.Update(item);
		}

		[Fact]
		public void UpdateManyTest()
		{
			PopulateTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = target.ToList();
			target.Update(actual);
		}

		[Fact]
		public void PopulateTest()
		{
			PurgeTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = new System.Collections.Generic.List<Customer>();
			for (int i = 0; i < 10; i++)
				actual.Add(new Customer
				{
					ContactId = new System.Random().Next(1, 1000),
					Name = RandomGenerator.GenerateString(100),
					Address = RandomGenerator.GenerateString(100),
					City = RandomGenerator.GenerateString(100),
					PostalCode = RandomGenerator.GenerateString(100),
					Country = RandomGenerator.GenerateString(100),
					Email = RandomGenerator.GenerateString(100),
					Phone = RandomGenerator.GenerateString(100),
					Fax = RandomGenerator.GenerateString(100)
				});
			target.Create(actual);
		}

		[Fact]
		public void CountTest()
		{
			CreateTest();
			ICustomerRepository target = new CustomerRepository();
			var actual = target.Count();
			Assert.NotEqual(0, actual);
		}

	}
}

namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using Xunit;

	
	public class ProductDataAccessTest : DataAccessTestBase
	{
		[Fact]
		public void CreateTest()
		{
			PurgeTest();
			IProductRepository target = new ProductRepository();
			var actual = new Product
			{
				PartNumber = RandomGenerator.GenerateString(100),
				Ean13 = RandomGenerator.GenerateString(100),
				Name = RandomGenerator.GenerateString(100),
				Description = RandomGenerator.GenerateString(100),
				Rating = System.Convert.ToDecimal(new System.Random().Next(1,1000))
			};
			target.Create(actual);
		}

		[Fact]
		public void CreateWithParametersTest()
		{
			PurgeTest();
			IProductRepository target = new ProductRepository();
			target.Create(RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100), RandomGenerator.GenerateString(100), System.Convert.ToDecimal(new System.Random().Next(1,1000)));
		}

		[Fact]
		public void ToListTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var actual = target.ToList();
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void ToArrayTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var actual = target.ToArray();
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void ToListWithTopTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var actual = target.ToList(10);
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void ToArrayWithTopTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var actual = target.ToArray(10);
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByIdTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectById(record.Id);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByPartNumberTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByPartNumber(record.PartNumber);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByEan13Test()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByEan13(record.Ean13);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByNameTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByName(record.Name);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByDescriptionTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByDescription(record.Description);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByRatingTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByRating(record.Rating);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByIdWithTopTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectById(record.Id, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByPartNumberWithTopTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByPartNumber(record.PartNumber, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByEan13WithTopTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByEan13(record.Ean13, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByNameWithTopTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByName(record.Name, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByDescriptionWithTopTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByDescription(record.Description, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByRatingWithTopTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByRating(record.Rating, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void DeleteTest()
		{
			PurgeTest();
			IProductRepository target = new ProductRepository();
			var actual = new Product
			{
				PartNumber = RandomGenerator.GenerateString(100),
				Ean13 = RandomGenerator.GenerateString(100),
				Name = RandomGenerator.GenerateString(100),
				Description = RandomGenerator.GenerateString(100),
				Rating = System.Convert.ToDecimal(new System.Random().Next(1,1000))
			};
			target.Create(actual);
			target.Delete(actual);
		}

		[Fact]
		public void DeleteManyTest()
		{
			PopulateTest();
			IProductRepository target = new ProductRepository();
			var actual = target.ToList();
			target.Delete(actual);
		}

		[Fact]
		public void DeleteByIdTest()
		{
			PurgeTest();
			IProductRepository target = new ProductRepository();
			var actual = new Product
			{
				PartNumber = RandomGenerator.GenerateString(100),
				Ean13 = RandomGenerator.GenerateString(100),
				Name = RandomGenerator.GenerateString(100),
				Description = RandomGenerator.GenerateString(100),
				Rating = System.Convert.ToDecimal(new System.Random().Next(1,1000))
			};
			target.Create(actual);
			target.DeleteById(actual.Id);
		}

		[Fact]
		public void DeleteByPartNumberTest()
		{
			PurgeTest();
			IProductRepository target = new ProductRepository();
			var actual = new Product
			{
				PartNumber = RandomGenerator.GenerateString(100),
				Ean13 = RandomGenerator.GenerateString(100),
				Name = RandomGenerator.GenerateString(100),
				Description = RandomGenerator.GenerateString(100),
				Rating = System.Convert.ToDecimal(new System.Random().Next(1,1000))
			};
			target.Create(actual);
			target.DeleteByPartNumber(actual.PartNumber);
		}

		[Fact]
		public void DeleteByEan13Test()
		{
			PurgeTest();
			IProductRepository target = new ProductRepository();
			var actual = new Product
			{
				PartNumber = RandomGenerator.GenerateString(100),
				Ean13 = RandomGenerator.GenerateString(100),
				Name = RandomGenerator.GenerateString(100),
				Description = RandomGenerator.GenerateString(100),
				Rating = System.Convert.ToDecimal(new System.Random().Next(1,1000))
			};
			target.Create(actual);
			target.DeleteByEan13(actual.Ean13);
		}

		[Fact]
		public void DeleteByNameTest()
		{
			PurgeTest();
			IProductRepository target = new ProductRepository();
			var actual = new Product
			{
				PartNumber = RandomGenerator.GenerateString(100),
				Ean13 = RandomGenerator.GenerateString(100),
				Name = RandomGenerator.GenerateString(100),
				Description = RandomGenerator.GenerateString(100),
				Rating = System.Convert.ToDecimal(new System.Random().Next(1,1000))
			};
			target.Create(actual);
			target.DeleteByName(actual.Name);
		}

		[Fact]
		public void DeleteByDescriptionTest()
		{
			PurgeTest();
			IProductRepository target = new ProductRepository();
			var actual = new Product
			{
				PartNumber = RandomGenerator.GenerateString(100),
				Ean13 = RandomGenerator.GenerateString(100),
				Name = RandomGenerator.GenerateString(100),
				Description = RandomGenerator.GenerateString(100),
				Rating = System.Convert.ToDecimal(new System.Random().Next(1,1000))
			};
			target.Create(actual);
			target.DeleteByDescription(actual.Description);
		}

		[Fact]
		public void DeleteByRatingTest()
		{
			PurgeTest();
			IProductRepository target = new ProductRepository();
			var actual = new Product
			{
				PartNumber = RandomGenerator.GenerateString(100),
				Ean13 = RandomGenerator.GenerateString(100),
				Name = RandomGenerator.GenerateString(100),
				Description = RandomGenerator.GenerateString(100),
				Rating = System.Convert.ToDecimal(new System.Random().Next(1,1000))
			};
			target.Create(actual);
			target.DeleteByRating(actual.Rating);
		}

		[Fact]
		public void PurgeTest()
		{
			IProductRepository target = new ProductRepository();
			target.Purge();
			var actual = target.ToList();
			Assert.Null(actual);
		}

		[Fact]
		public void UpdateTest()
		{
			IProductRepository target = new ProductRepository();
			var actual = target.ToList();
			var item = actual[0];
			target.Update(item);
		}

		[Fact]
		public void UpdateManyTest()
		{
			PopulateTest();
			IProductRepository target = new ProductRepository();
			var actual = target.ToList();
			target.Update(actual);
		}

		[Fact]
		public void PopulateTest()
		{
			PurgeTest();
			IProductRepository target = new ProductRepository();
			var actual = new System.Collections.Generic.List<Product>();
			for (int i = 0; i < 10; i++)
				actual.Add(new Product
				{
					PartNumber = RandomGenerator.GenerateString(100),
					Ean13 = RandomGenerator.GenerateString(100),
					Name = RandomGenerator.GenerateString(100),
					Description = RandomGenerator.GenerateString(100),
					Rating = System.Convert.ToDecimal(new System.Random().Next(1,1000))
				});
			target.Create(actual);
		}

		[Fact]
		public void CountTest()
		{
			CreateTest();
			IProductRepository target = new ProductRepository();
			var actual = target.Count();
			Assert.NotEqual(0, actual);
		}

	}
}

namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using Xunit;

	
	public class StockDataAccessTest : DataAccessTestBase
	{
		[Fact]
		public void CreateTest()
		{
			PurgeTest();
			IStockRepository target = new StockRepository();
			var actual = new Stock
			{
				ProductId = new System.Random().Next(1, 1000),
				Quantity = new System.Random().Next(1, 1000),
				LastUpdated = System.DateTime.Now
			};
			target.Create(actual);
		}

		[Fact]
		public void CreateWithParametersTest()
		{
			PurgeTest();
			IStockRepository target = new StockRepository();
			target.Create(new System.Random().Next(1, 1000), new System.Random().Next(1, 1000), System.DateTime.Now);
		}

		[Fact]
		public void ToListTest()
		{
			CreateTest();
			IStockRepository target = new StockRepository();
			var actual = target.ToList();
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void ToArrayTest()
		{
			CreateTest();
			IStockRepository target = new StockRepository();
			var actual = target.ToArray();
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void ToListWithTopTest()
		{
			CreateTest();
			IStockRepository target = new StockRepository();
			var actual = target.ToList(10);
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void ToArrayWithTopTest()
		{
			CreateTest();
			IStockRepository target = new StockRepository();
			var actual = target.ToArray(10);
			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByIdTest()
		{
			CreateTest();
			IStockRepository target = new StockRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectById(record.Id);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByProductIdTest()
		{
			CreateTest();
			IStockRepository target = new StockRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByProductId(record.ProductId);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByQuantityTest()
		{
			CreateTest();
			IStockRepository target = new StockRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByQuantity(record.Quantity);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByLastUpdatedTest()
		{
			CreateTest();
			IStockRepository target = new StockRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByLastUpdated(record.LastUpdated);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByIdWithTopTest()
		{
			CreateTest();
			IStockRepository target = new StockRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectById(record.Id, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByProductIdWithTopTest()
		{
			CreateTest();
			IStockRepository target = new StockRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByProductId(record.ProductId, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByQuantityWithTopTest()
		{
			CreateTest();
			IStockRepository target = new StockRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByQuantity(record.Quantity, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void SelectByLastUpdatedWithTopTest()
		{
			CreateTest();
			IStockRepository target = new StockRepository();
			var record = target.ToList(1)[0];
			var actual = target.SelectByLastUpdated(record.LastUpdated, 10);

			Assert.NotNull(actual);
			CollectionAssert.AllItemsAreNotNull(actual);
		}

		[Fact]
		public void DeleteTest()
		{
			PurgeTest();
			IStockRepository target = new StockRepository();
			var actual = new Stock
			{
				ProductId = new System.Random().Next(1, 1000),
				Quantity = new System.Random().Next(1, 1000),
				LastUpdated = System.DateTime.Now
			};
			target.Create(actual);
			target.Delete(actual);
		}

		[Fact]
		public void DeleteManyTest()
		{
			PopulateTest();
			IStockRepository target = new StockRepository();
			var actual = target.ToList();
			target.Delete(actual);
		}

		[Fact]
		public void DeleteByIdTest()
		{
			PurgeTest();
			IStockRepository target = new StockRepository();
			var actual = new Stock
			{
				ProductId = new System.Random().Next(1, 1000),
				Quantity = new System.Random().Next(1, 1000),
				LastUpdated = System.DateTime.Now
			};
			target.Create(actual);
			target.DeleteById(actual.Id);
		}

		[Fact]
		public void DeleteByProductIdTest()
		{
			PurgeTest();
			IStockRepository target = new StockRepository();
			var actual = new Stock
			{
				ProductId = new System.Random().Next(1, 1000),
				Quantity = new System.Random().Next(1, 1000),
				LastUpdated = System.DateTime.Now
			};
			target.Create(actual);
			target.DeleteByProductId(actual.ProductId);
		}

		[Fact]
		public void DeleteByQuantityTest()
		{
			PurgeTest();
			IStockRepository target = new StockRepository();
			var actual = new Stock
			{
				ProductId = new System.Random().Next(1, 1000),
				Quantity = new System.Random().Next(1, 1000),
				LastUpdated = System.DateTime.Now
			};
			target.Create(actual);
			target.DeleteByQuantity(actual.Quantity);
		}

		[Fact]
		public void DeleteByLastUpdatedTest()
		{
			PurgeTest();
			IStockRepository target = new StockRepository();
			var actual = new Stock
			{
				ProductId = new System.Random().Next(1, 1000),
				Quantity = new System.Random().Next(1, 1000),
				LastUpdated = System.DateTime.Now
			};
			target.Create(actual);
			target.DeleteByLastUpdated(actual.LastUpdated);
		}

		[Fact]
		public void PurgeTest()
		{
			IStockRepository target = new StockRepository();
			target.Purge();
			var actual = target.ToList();
			Assert.Null(actual);
		}

		[Fact]
		public void UpdateTest()
		{
			IStockRepository target = new StockRepository();
			var actual = target.ToList();
			var item = actual[0];
			target.Update(item);
		}

		[Fact]
		public void UpdateManyTest()
		{
			PopulateTest();
			IStockRepository target = new StockRepository();
			var actual = target.ToList();
			target.Update(actual);
		}

		[Fact]
		public void PopulateTest()
		{
			PurgeTest();
			IStockRepository target = new StockRepository();
			var actual = new System.Collections.Generic.List<Stock>();
			for (int i = 0; i < 10; i++)
				actual.Add(new Stock
				{
					ProductId = new System.Random().Next(1, 1000),
					Quantity = new System.Random().Next(1, 1000),
					LastUpdated = System.DateTime.Now
				});
			target.Create(actual);
		}

		[Fact]
		public void CountTest()
		{
			CreateTest();
			IStockRepository target = new StockRepository();
			var actual = target.Count();
			Assert.NotEqual(0, actual);
		}

	}
}

namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	public partial class MockDataRepository : IDataRepository
	{

		public MockDataRepository()
		{
			Contact = new MockContactRepository();
			Customer = new MockCustomerRepository();
			Product = new MockProductRepository();
			Stock = new MockStockRepository();
		}

		public IContactRepository Contact { get; private set; }

		public ICustomerRepository Customer { get; private set; }

		public IProductRepository Product { get; private set; }

		public IStockRepository Stock { get; private set; }

		public System.Data.SqlServerCe.SqlCeTransaction BeginTransaction()
		{
			return null;
		}

		public void Commit()
		{
		}

		public void Rollback()
		{
		}

		public void Dispose()
		{
		}

	}
}

namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using System.Linq;

	public partial class MockContactRepository : IContactRepository
	{

		private readonly System.Collections.Generic.List<Contact> mockDataSource = new System.Collections.Generic.List<Contact>();

		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		public System.Collections.Generic.List<Contact> ToList()
		{
			return mockDataSource;
		}

		public Contact[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		public System.Collections.Generic.List<Contact> ToList(int count)
		{
			return mockDataSource.Take(count).ToList();
		}

		public Contact[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		public System.Collections.Generic.List<Contact> SelectById(System.Int32? Id)
		{
			return mockDataSource.Where(c => c.Id == Id).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectByName(System.String Name)
		{
			return mockDataSource.Where(c => c.Name == Name).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectByAddress(System.String Address)
		{
			return mockDataSource.Where(c => c.Address == Address).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectByCity(System.String City)
		{
			return mockDataSource.Where(c => c.City == City).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectByPostalCode(System.String PostalCode)
		{
			return mockDataSource.Where(c => c.PostalCode == PostalCode).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectByCountry(System.String Country)
		{
			return mockDataSource.Where(c => c.Country == Country).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectByEmail(System.String Email)
		{
			return mockDataSource.Where(c => c.Email == Email).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectByPhone(System.String Phone)
		{
			return mockDataSource.Where(c => c.Phone == Phone).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectById(System.Int32? Id, int count)
		{
			return mockDataSource.Where(c => c.Id == Id).Take(count).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectByName(System.String Name, int count)
		{
			return mockDataSource.Where(c => c.Name == Name).Take(count).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectByAddress(System.String Address, int count)
		{
			return mockDataSource.Where(c => c.Address == Address).Take(count).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectByCity(System.String City, int count)
		{
			return mockDataSource.Where(c => c.City == City).Take(count).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectByPostalCode(System.String PostalCode, int count)
		{
			return mockDataSource.Where(c => c.PostalCode == PostalCode).Take(count).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectByCountry(System.String Country, int count)
		{
			return mockDataSource.Where(c => c.Country == Country).Take(count).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectByEmail(System.String Email, int count)
		{
			return mockDataSource.Where(c => c.Email == Email).Take(count).ToList();
		}

		public System.Collections.Generic.List<Contact> SelectByPhone(System.String Phone, int count)
		{
			return mockDataSource.Where(c => c.Phone == Phone).Take(count).ToList();
		}

		public void Create(Contact item)
		{
			mockDataSource.Add(item);
		}

		public void Create(System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone)
		{
			Create(new Contact
			{
				Name = Name, 
				Address = Address, 
				City = City, 
				PostalCode = PostalCode, 
				Country = Country, 
				Email = Email, 
				Phone = Phone, 
			});
		}

		public void Create(System.Int32? Id, System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone)
		{
			Create(new Contact
			{
				Id = Id, 
				Name = Name, 
				Address = Address, 
				City = City, 
				PostalCode = PostalCode, 
				Country = Country, 
				Email = Email, 
				Phone = Phone, 
			});
		}

		public void Create(System.Collections.Generic.IEnumerable<Contact> items)
		{
			mockDataSource.AddRange(items);
		}

		public void Delete(Contact item)
		{
			mockDataSource.Remove(item);
		}

		public void Delete(System.Collections.Generic.IEnumerable<Contact> items)
		{
			foreach (var item in new System.Collections.Generic.List<Contact>(items)) mockDataSource.Remove(item);
		}

		public int DeleteById(System.Int32? Id)
		{
			var items = mockDataSource.Where(c => c.Id == Id);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Contact>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByName(System.String Name)
		{
			var items = mockDataSource.Where(c => c.Name == Name);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Contact>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByAddress(System.String Address)
		{
			var items = mockDataSource.Where(c => c.Address == Address);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Contact>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByCity(System.String City)
		{
			var items = mockDataSource.Where(c => c.City == City);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Contact>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByPostalCode(System.String PostalCode)
		{
			var items = mockDataSource.Where(c => c.PostalCode == PostalCode);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Contact>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByCountry(System.String Country)
		{
			var items = mockDataSource.Where(c => c.Country == Country);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Contact>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByEmail(System.String Email)
		{
			var items = mockDataSource.Where(c => c.Email == Email);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Contact>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByPhone(System.String Phone)
		{
			var items = mockDataSource.Where(c => c.Phone == Phone);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Contact>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int Purge()
		{
			var returnValue = mockDataSource.Count;
			mockDataSource.Clear();
			return returnValue;
		}

		public void Update(Contact item)
		{
			for (int i = 0; i < mockDataSource.Count; i++)
			{
				if (mockDataSource[i].Id == item.Id)
					mockDataSource[i] = item;
			}
		}

		public void Update(System.Collections.Generic.IEnumerable<Contact> items)
		{
			foreach (var item in items) Update(item);
		}

		public int Count()
		{
			return mockDataSource.Count;
		}

	}
}

namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using System.Linq;

	public partial class MockCustomerRepository : ICustomerRepository
	{

		private readonly System.Collections.Generic.List<Customer> mockDataSource = new System.Collections.Generic.List<Customer>();

		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		public System.Collections.Generic.List<Customer> ToList()
		{
			return mockDataSource;
		}

		public Customer[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		public System.Collections.Generic.List<Customer> ToList(int count)
		{
			return mockDataSource.Take(count).ToList();
		}

		public Customer[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		public System.Collections.Generic.List<Customer> SelectById(System.Int32? Id)
		{
			return mockDataSource.Where(c => c.Id == Id).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByContactId(System.Int32? ContactId)
		{
			return mockDataSource.Where(c => c.ContactId == ContactId).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByName(System.String Name)
		{
			return mockDataSource.Where(c => c.Name == Name).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByAddress(System.String Address)
		{
			return mockDataSource.Where(c => c.Address == Address).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByCity(System.String City)
		{
			return mockDataSource.Where(c => c.City == City).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByPostalCode(System.String PostalCode)
		{
			return mockDataSource.Where(c => c.PostalCode == PostalCode).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByCountry(System.String Country)
		{
			return mockDataSource.Where(c => c.Country == Country).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByEmail(System.String Email)
		{
			return mockDataSource.Where(c => c.Email == Email).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByPhone(System.String Phone)
		{
			return mockDataSource.Where(c => c.Phone == Phone).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByFax(System.String Fax)
		{
			return mockDataSource.Where(c => c.Fax == Fax).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectById(System.Int32? Id, int count)
		{
			return mockDataSource.Where(c => c.Id == Id).Take(count).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByContactId(System.Int32? ContactId, int count)
		{
			return mockDataSource.Where(c => c.ContactId == ContactId).Take(count).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByName(System.String Name, int count)
		{
			return mockDataSource.Where(c => c.Name == Name).Take(count).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByAddress(System.String Address, int count)
		{
			return mockDataSource.Where(c => c.Address == Address).Take(count).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByCity(System.String City, int count)
		{
			return mockDataSource.Where(c => c.City == City).Take(count).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByPostalCode(System.String PostalCode, int count)
		{
			return mockDataSource.Where(c => c.PostalCode == PostalCode).Take(count).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByCountry(System.String Country, int count)
		{
			return mockDataSource.Where(c => c.Country == Country).Take(count).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByEmail(System.String Email, int count)
		{
			return mockDataSource.Where(c => c.Email == Email).Take(count).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByPhone(System.String Phone, int count)
		{
			return mockDataSource.Where(c => c.Phone == Phone).Take(count).ToList();
		}

		public System.Collections.Generic.List<Customer> SelectByFax(System.String Fax, int count)
		{
			return mockDataSource.Where(c => c.Fax == Fax).Take(count).ToList();
		}

		public void Create(Customer item)
		{
			mockDataSource.Add(item);
		}

		public void Create(System.Int32? ContactId, System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone, System.String Fax)
		{
			Create(new Customer
			{
				ContactId = ContactId, 
				Name = Name, 
				Address = Address, 
				City = City, 
				PostalCode = PostalCode, 
				Country = Country, 
				Email = Email, 
				Phone = Phone, 
				Fax = Fax, 
			});
		}

		public void Create(System.Int32? Id, System.Int32? ContactId, System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone, System.String Fax)
		{
			Create(new Customer
			{
				Id = Id, 
				ContactId = ContactId, 
				Name = Name, 
				Address = Address, 
				City = City, 
				PostalCode = PostalCode, 
				Country = Country, 
				Email = Email, 
				Phone = Phone, 
				Fax = Fax, 
			});
		}

		public void Create(System.Collections.Generic.IEnumerable<Customer> items)
		{
			mockDataSource.AddRange(items);
		}

		public void Delete(Customer item)
		{
			mockDataSource.Remove(item);
		}

		public void Delete(System.Collections.Generic.IEnumerable<Customer> items)
		{
			foreach (var item in new System.Collections.Generic.List<Customer>(items)) mockDataSource.Remove(item);
		}

		public int DeleteById(System.Int32? Id)
		{
			var items = mockDataSource.Where(c => c.Id == Id);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Customer>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByContactId(System.Int32? ContactId)
		{
			var items = mockDataSource.Where(c => c.ContactId == ContactId);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Customer>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByName(System.String Name)
		{
			var items = mockDataSource.Where(c => c.Name == Name);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Customer>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByAddress(System.String Address)
		{
			var items = mockDataSource.Where(c => c.Address == Address);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Customer>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByCity(System.String City)
		{
			var items = mockDataSource.Where(c => c.City == City);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Customer>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByPostalCode(System.String PostalCode)
		{
			var items = mockDataSource.Where(c => c.PostalCode == PostalCode);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Customer>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByCountry(System.String Country)
		{
			var items = mockDataSource.Where(c => c.Country == Country);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Customer>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByEmail(System.String Email)
		{
			var items = mockDataSource.Where(c => c.Email == Email);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Customer>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByPhone(System.String Phone)
		{
			var items = mockDataSource.Where(c => c.Phone == Phone);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Customer>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByFax(System.String Fax)
		{
			var items = mockDataSource.Where(c => c.Fax == Fax);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Customer>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int Purge()
		{
			var returnValue = mockDataSource.Count;
			mockDataSource.Clear();
			return returnValue;
		}

		public void Update(Customer item)
		{
			for (int i = 0; i < mockDataSource.Count; i++)
			{
				if (mockDataSource[i].Id == item.Id)
					mockDataSource[i] = item;
			}
		}

		public void Update(System.Collections.Generic.IEnumerable<Customer> items)
		{
			foreach (var item in items) Update(item);
		}

		public int Count()
		{
			return mockDataSource.Count;
		}

	}
}

namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using System.Linq;

	public partial class MockProductRepository : IProductRepository
	{

		private readonly System.Collections.Generic.List<Product> mockDataSource = new System.Collections.Generic.List<Product>();

		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		public System.Collections.Generic.List<Product> ToList()
		{
			return mockDataSource;
		}

		public Product[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		public System.Collections.Generic.List<Product> ToList(int count)
		{
			return mockDataSource.Take(count).ToList();
		}

		public Product[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		public System.Collections.Generic.List<Product> SelectById(System.Int32? Id)
		{
			return mockDataSource.Where(c => c.Id == Id).ToList();
		}

		public System.Collections.Generic.List<Product> SelectByPartNumber(System.String PartNumber)
		{
			return mockDataSource.Where(c => c.PartNumber == PartNumber).ToList();
		}

		public System.Collections.Generic.List<Product> SelectByEan13(System.String Ean13)
		{
			return mockDataSource.Where(c => c.Ean13 == Ean13).ToList();
		}

		public System.Collections.Generic.List<Product> SelectByName(System.String Name)
		{
			return mockDataSource.Where(c => c.Name == Name).ToList();
		}

		public System.Collections.Generic.List<Product> SelectByDescription(System.String Description)
		{
			return mockDataSource.Where(c => c.Description == Description).ToList();
		}

		public System.Collections.Generic.List<Product> SelectByRating(System.Decimal? Rating)
		{
			return mockDataSource.Where(c => c.Rating == Rating).ToList();
		}

		public System.Collections.Generic.List<Product> SelectById(System.Int32? Id, int count)
		{
			return mockDataSource.Where(c => c.Id == Id).Take(count).ToList();
		}

		public System.Collections.Generic.List<Product> SelectByPartNumber(System.String PartNumber, int count)
		{
			return mockDataSource.Where(c => c.PartNumber == PartNumber).Take(count).ToList();
		}

		public System.Collections.Generic.List<Product> SelectByEan13(System.String Ean13, int count)
		{
			return mockDataSource.Where(c => c.Ean13 == Ean13).Take(count).ToList();
		}

		public System.Collections.Generic.List<Product> SelectByName(System.String Name, int count)
		{
			return mockDataSource.Where(c => c.Name == Name).Take(count).ToList();
		}

		public System.Collections.Generic.List<Product> SelectByDescription(System.String Description, int count)
		{
			return mockDataSource.Where(c => c.Description == Description).Take(count).ToList();
		}

		public System.Collections.Generic.List<Product> SelectByRating(System.Decimal? Rating, int count)
		{
			return mockDataSource.Where(c => c.Rating == Rating).Take(count).ToList();
		}

		public void Create(Product item)
		{
			mockDataSource.Add(item);
		}

		public void Create(System.String PartNumber, System.String Ean13, System.String Name, System.String Description, System.Decimal? Rating)
		{
			Create(new Product
			{
				PartNumber = PartNumber, 
				Ean13 = Ean13, 
				Name = Name, 
				Description = Description, 
				Rating = Rating, 
			});
		}

		public void Create(System.Int32? Id, System.String PartNumber, System.String Ean13, System.String Name, System.String Description, System.Decimal? Rating)
		{
			Create(new Product
			{
				Id = Id, 
				PartNumber = PartNumber, 
				Ean13 = Ean13, 
				Name = Name, 
				Description = Description, 
				Rating = Rating, 
			});
		}

		public void Create(System.Collections.Generic.IEnumerable<Product> items)
		{
			mockDataSource.AddRange(items);
		}

		public void Delete(Product item)
		{
			mockDataSource.Remove(item);
		}

		public void Delete(System.Collections.Generic.IEnumerable<Product> items)
		{
			foreach (var item in new System.Collections.Generic.List<Product>(items)) mockDataSource.Remove(item);
		}

		public int DeleteById(System.Int32? Id)
		{
			var items = mockDataSource.Where(c => c.Id == Id);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Product>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByPartNumber(System.String PartNumber)
		{
			var items = mockDataSource.Where(c => c.PartNumber == PartNumber);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Product>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByEan13(System.String Ean13)
		{
			var items = mockDataSource.Where(c => c.Ean13 == Ean13);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Product>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByName(System.String Name)
		{
			var items = mockDataSource.Where(c => c.Name == Name);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Product>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByDescription(System.String Description)
		{
			var items = mockDataSource.Where(c => c.Description == Description);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Product>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByRating(System.Decimal? Rating)
		{
			var items = mockDataSource.Where(c => c.Rating == Rating);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Product>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int Purge()
		{
			var returnValue = mockDataSource.Count;
			mockDataSource.Clear();
			return returnValue;
		}

		public void Update(Product item)
		{
			for (int i = 0; i < mockDataSource.Count; i++)
			{
				if (mockDataSource[i].Id == item.Id)
					mockDataSource[i] = item;
			}
		}

		public void Update(System.Collections.Generic.IEnumerable<Product> items)
		{
			foreach (var item in items) Update(item);
		}

		public int Count()
		{
			return mockDataSource.Count;
		}

	}
}

namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using System.Linq;

	public partial class MockStockRepository : IStockRepository
	{

		private readonly System.Collections.Generic.List<Stock> mockDataSource = new System.Collections.Generic.List<Stock>();

		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		public System.Collections.Generic.List<Stock> ToList()
		{
			return mockDataSource;
		}

		public Stock[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		public System.Collections.Generic.List<Stock> ToList(int count)
		{
			return mockDataSource.Take(count).ToList();
		}

		public Stock[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		public System.Collections.Generic.List<Stock> SelectById(System.Int32? Id)
		{
			return mockDataSource.Where(c => c.Id == Id).ToList();
		}

		public System.Collections.Generic.List<Stock> SelectByProductId(System.Int32? ProductId)
		{
			return mockDataSource.Where(c => c.ProductId == ProductId).ToList();
		}

		public System.Collections.Generic.List<Stock> SelectByQuantity(System.Int32? Quantity)
		{
			return mockDataSource.Where(c => c.Quantity == Quantity).ToList();
		}

		public System.Collections.Generic.List<Stock> SelectByLastUpdated(System.DateTime? LastUpdated)
		{
			return mockDataSource.Where(c => c.LastUpdated == LastUpdated).ToList();
		}

		public System.Collections.Generic.List<Stock> SelectById(System.Int32? Id, int count)
		{
			return mockDataSource.Where(c => c.Id == Id).Take(count).ToList();
		}

		public System.Collections.Generic.List<Stock> SelectByProductId(System.Int32? ProductId, int count)
		{
			return mockDataSource.Where(c => c.ProductId == ProductId).Take(count).ToList();
		}

		public System.Collections.Generic.List<Stock> SelectByQuantity(System.Int32? Quantity, int count)
		{
			return mockDataSource.Where(c => c.Quantity == Quantity).Take(count).ToList();
		}

		public System.Collections.Generic.List<Stock> SelectByLastUpdated(System.DateTime? LastUpdated, int count)
		{
			return mockDataSource.Where(c => c.LastUpdated == LastUpdated).Take(count).ToList();
		}

		public void Create(Stock item)
		{
			mockDataSource.Add(item);
		}

		public void Create(System.Int32? ProductId, System.Int32? Quantity, System.DateTime? LastUpdated)
		{
			Create(new Stock
			{
				ProductId = ProductId, 
				Quantity = Quantity, 
				LastUpdated = LastUpdated, 
			});
		}

		public void Create(System.Int32? Id, System.Int32? ProductId, System.Int32? Quantity, System.DateTime? LastUpdated)
		{
			Create(new Stock
			{
				Id = Id, 
				ProductId = ProductId, 
				Quantity = Quantity, 
				LastUpdated = LastUpdated, 
			});
		}

		public void Create(System.Collections.Generic.IEnumerable<Stock> items)
		{
			mockDataSource.AddRange(items);
		}

		public void Delete(Stock item)
		{
			mockDataSource.Remove(item);
		}

		public void Delete(System.Collections.Generic.IEnumerable<Stock> items)
		{
			foreach (var item in new System.Collections.Generic.List<Stock>(items)) mockDataSource.Remove(item);
		}

		public int DeleteById(System.Int32? Id)
		{
			var items = mockDataSource.Where(c => c.Id == Id);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Stock>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByProductId(System.Int32? ProductId)
		{
			var items = mockDataSource.Where(c => c.ProductId == ProductId);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Stock>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByQuantity(System.Int32? Quantity)
		{
			var items = mockDataSource.Where(c => c.Quantity == Quantity);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Stock>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int DeleteByLastUpdated(System.DateTime? LastUpdated)
		{
			var items = mockDataSource.Where(c => c.LastUpdated == LastUpdated);
			var count = 0;
			foreach (var item in new System.Collections.Generic.List<Stock>(items))
			{
				mockDataSource.Remove(item);
				count++;
			}
			return count;
		}

		public int Purge()
		{
			var returnValue = mockDataSource.Count;
			mockDataSource.Clear();
			return returnValue;
		}

		public void Update(Stock item)
		{
			for (int i = 0; i < mockDataSource.Count; i++)
			{
				if (mockDataSource[i].Id == item.Id)
					mockDataSource[i] = item;
			}
		}

		public void Update(System.Collections.Generic.IEnumerable<Stock> items)
		{
			foreach (var item in items) Update(item);
		}

		public int Count()
		{
			return mockDataSource.Count;
		}

	}
}

namespace UnitTestsVS2010.XUnitSingleFileDemo
{
	using Xunit;


    internal static class CollectionAssert
    {
        internal static void AllItemsAreNotNull<T>(System.Collections.Generic.IEnumerable<T> items)
        {
            foreach (var item in items) 
                Assert.NotNull(item);
        }
    }
}
