/*
	This code was generated by SQL Compact Code Generator version 1.2.1.5

	SQL Compact Code Generator was written by Christian Resma Helle (http://sqlcecodegen.codeplex.com)
	and is under the GNU General Public License version 2 (GPLv2)

	Generated: 07/19/2011 18:06:46
*/



namespace ConsoleApp.TestDatabaseMultiple
{
	/// <summary>
	/// Default IProductRepository implementation 
	/// </summary>
	public partial class ProductRepository : IProductRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<Product> ToList()
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM Product";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Product[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Product> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Product", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Product[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<Product> SelectById(System.Int32? Id)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM Product WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Product WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE PartNumber=?

		/// <summary>
		/// Retrieves a collection of items by PartNumber
		/// </summary>
		/// <param name="PartNumber">PartNumber value</param>
		public System.Collections.Generic.List<Product> SelectByPartNumber(System.String PartNumber)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (PartNumber != null)
				{
					command.CommandText = "SELECT * FROM Product WHERE PartNumber=@PartNumber";
					command.Parameters.Add("@PartNumber", System.Data.SqlDbType.NVarChar);
					command.Parameters["@PartNumber"].Value = PartNumber != null ? (object)PartNumber : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Product WHERE PartNumber IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Ean13=?

		/// <summary>
		/// Retrieves a collection of items by Ean13
		/// </summary>
		/// <param name="Ean13">Ean13 value</param>
		public System.Collections.Generic.List<Product> SelectByEan13(System.String Ean13)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Ean13 != null)
				{
					command.CommandText = "SELECT * FROM Product WHERE Ean13=@Ean13";
					command.Parameters.Add("@Ean13", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Ean13"].Value = Ean13 != null ? (object)Ean13 : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Product WHERE Ean13 IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Name=?

		/// <summary>
		/// Retrieves a collection of items by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		public System.Collections.Generic.List<Product> SelectByName(System.String Name)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Name != null)
				{
					command.CommandText = "SELECT * FROM Product WHERE Name=@Name";
					command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Product WHERE Name IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Description=?

		/// <summary>
		/// Retrieves a collection of items by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		public System.Collections.Generic.List<Product> SelectByDescription(System.String Description)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Description != null)
				{
					command.CommandText = "SELECT * FROM Product WHERE Description=@Description";
					command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Product WHERE Description IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Rating=?

		/// <summary>
		/// Retrieves a collection of items by Rating
		/// </summary>
		/// <param name="Rating">Rating value</param>
		public System.Collections.Generic.List<Product> SelectByRating(System.Decimal? Rating)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Rating != null)
				{
					command.CommandText = "SELECT * FROM Product WHERE Rating=@Rating";
					command.Parameters.Add("@Rating", System.Data.SqlDbType.Decimal);
					command.Parameters["@Rating"].Value = Rating != null ? (object)Rating : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Product WHERE Rating IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Product> SelectById(System.Int32? Id, int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Id=@Id";					command.CommandText = "SELECT * FROM Product WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE PartNumber=?

		/// <summary>
		/// Retrieves the first set of items specified by count by PartNumber
		/// </summary>
		/// <param name="PartNumber">PartNumber value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Product> SelectByPartNumber(System.String PartNumber, int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (PartNumber != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE PartNumber=@PartNumber";					command.CommandText = "SELECT * FROM Product WHERE PartNumber=@PartNumber";
				command.Parameters.Add("@PartNumber", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PartNumber"].Value = PartNumber != null ? (object)PartNumber : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE PartNumber IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Ean13=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Ean13
		/// </summary>
		/// <param name="Ean13">Ean13 value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Product> SelectByEan13(System.String Ean13, int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Ean13 != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Ean13=@Ean13";					command.CommandText = "SELECT * FROM Product WHERE Ean13=@Ean13";
				command.Parameters.Add("@Ean13", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Ean13"].Value = Ean13 != null ? (object)Ean13 : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Ean13 IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Name=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Product> SelectByName(System.String Name, int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Name != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Name=@Name";					command.CommandText = "SELECT * FROM Product WHERE Name=@Name";
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Name IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Description=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Product> SelectByDescription(System.String Description, int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Description != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Description=@Description";					command.CommandText = "SELECT * FROM Product WHERE Description=@Description";
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Description IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Rating=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Rating
		/// </summary>
		/// <param name="Rating">Rating value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Product> SelectByRating(System.Decimal? Rating, int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Rating != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Rating=@Rating";					command.CommandText = "SELECT * FROM Product WHERE Rating=@Rating";
				command.Parameters.Add("@Rating", System.Data.SqlDbType.Decimal);
				command.Parameters["@Rating"].Value = Rating != null ? (object)Rating : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Rating IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [Product]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(Product item)
		{
			Create(item.PartNumber, item.Ean13, item.Name, item.Description, item.Rating);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="PartNumber">PartNumber value</param>
		/// <param name="Ean13">Ean13 value</param>
		/// <param name="Name">Name value</param>
		/// <param name="Description">Description value</param>
		/// <param name="Rating">Rating value</param>
		public void Create(System.String PartNumber, System.String Ean13, System.String Name, System.String Description, System.Decimal? Rating)
		{
			if (PartNumber != null && PartNumber.Length > 100)
				throw new System.ArgumentException("Max length for PartNumber is 100");
			if (Ean13 != null && Ean13.Length > 100)
				throw new System.ArgumentException("Max length for Ean13 is 100");
			if (Name != null && Name.Length > 100)
				throw new System.ArgumentException("Max length for Name is 100");
			if (Description != null && Description.Length > 100)
				throw new System.ArgumentException("Max length for Description is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Product] (PartNumber, Ean13, Name, Description, Rating)  VALUES (@PartNumber, @Ean13, @Name, @Description, @Rating)";

				command.Parameters.Add("@PartNumber", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PartNumber"].Value = PartNumber != null ? (object)PartNumber : System.DBNull.Value;
				command.Parameters.Add("@Ean13", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Ean13"].Value = Ean13 != null ? (object)Ean13 : System.DBNull.Value;
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;
				command.Parameters.Add("@Rating", System.Data.SqlDbType.Decimal);
				command.Parameters["@Rating"].Value = Rating != null ? (object)Rating : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [Product] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="PartNumber">PartNumber value</param>
		/// <param name="Ean13">Ean13 value</param>
		/// <param name="Name">Name value</param>
		/// <param name="Description">Description value</param>
		/// <param name="Rating">Rating value</param>
		public void Create(System.Int32? Id, System.String PartNumber, System.String Ean13, System.String Name, System.String Description, System.Decimal? Rating)
		{
			if (PartNumber != null && PartNumber.Length > Product.PartNumber_Max_Length)
				throw new System.ArgumentException("Max length for PartNumber is 100");
			if (Ean13 != null && Ean13.Length > Product.Ean13_Max_Length)
				throw new System.ArgumentException("Max length for Ean13 is 100");
			if (Name != null && Name.Length > Product.Name_Max_Length)
				throw new System.ArgumentException("Max length for Name is 100");
			if (Description != null && Description.Length > Product.Description_Max_Length)
				throw new System.ArgumentException("Max length for Description is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Product] (Id, PartNumber, Ean13, Name, Description, Rating)  VALUES (@Id, @PartNumber, @Ean13, @Name, @Description, @Rating)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@PartNumber", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PartNumber"].Value = PartNumber != null ? (object)PartNumber : System.DBNull.Value;
				command.Parameters.Add("@Ean13", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Ean13"].Value = Ean13 != null ? (object)Ean13 : System.DBNull.Value;
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;
				command.Parameters.Add("@Rating", System.Data.SqlDbType.Decimal);
				command.Parameters["@Rating"].Value = Rating != null ? (object)Rating : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<Product> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "Product";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.PartNumber);
						record.SetValue(2, item.Ean13);
						record.SetValue(3, item.Name);
						record.SetValue(4, item.Description);
						record.SetValue(5, item.Rating);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(Product item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<Product> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;

					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int32? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY PartNumber

		/// <summary>
		/// Delete records by PartNumber
		/// </summary>
		/// <param name="PartNumber">PartNumber value</param>
		public int DeleteByPartNumber(System.String PartNumber)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE PartNumber=@PartNumber";
				command.Parameters.Add("@PartNumber", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PartNumber"].Value = PartNumber != null ? (object)PartNumber : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Ean13

		/// <summary>
		/// Delete records by Ean13
		/// </summary>
		/// <param name="Ean13">Ean13 value</param>
		public int DeleteByEan13(System.String Ean13)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE Ean13=@Ean13";
				command.Parameters.Add("@Ean13", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Ean13"].Value = Ean13 != null ? (object)Ean13 : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Name

		/// <summary>
		/// Delete records by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		public int DeleteByName(System.String Name)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE Name=@Name";
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Description

		/// <summary>
		/// Delete records by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		public int DeleteByDescription(System.String Description)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE Description=@Description";
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Rating

		/// <summary>
		/// Delete records by Rating
		/// </summary>
		/// <param name="Rating">Rating value</param>
		public int DeleteByRating(System.Decimal? Rating)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE Rating=@Rating";
				command.Parameters.Add("@Rating", System.Data.SqlDbType.Decimal);
				command.Parameters["@Rating"].Value = Rating != null ? (object)Rating : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(Product item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Product] SET PartNumber = @PartNumber, Ean13 = @Ean13, Name = @Name, Description = @Description, Rating = @Rating WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@PartNumber", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PartNumber"].Value = item.PartNumber != null ? (object)item.PartNumber : System.DBNull.Value;
				command.Parameters.Add("@Ean13", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Ean13"].Value = item.Ean13 != null ? (object)item.Ean13 : System.DBNull.Value;
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = item.Name != null ? (object)item.Name : System.DBNull.Value;
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = item.Description != null ? (object)item.Description : System.DBNull.Value;
				command.Parameters.Add("@Rating", System.Data.SqlDbType.Decimal);
				command.Parameters["@Rating"].Value = item.Rating != null ? (object)item.Rating : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<Product> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Product] SET PartNumber = @PartNumber, Ean13 = @Ean13, Name = @Name, Description = @Description, Rating = @Rating WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters.Add("@PartNumber", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Ean13", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Rating", System.Data.SqlDbType.Decimal);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@PartNumber"].Value = item.PartNumber != null ? (object)item.PartNumber : System.DBNull.Value;
					command.Parameters["@Ean13"].Value = item.Ean13 != null ? (object)item.Ean13 : System.DBNull.Value;
					command.Parameters["@Name"].Value = item.Name != null ? (object)item.Name : System.DBNull.Value;
					command.Parameters["@Description"].Value = item.Description != null ? (object)item.Description : System.DBNull.Value;
					command.Parameters["@Rating"].Value = item.Rating != null ? (object)item.Rating : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [Product]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM Product";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}
}

