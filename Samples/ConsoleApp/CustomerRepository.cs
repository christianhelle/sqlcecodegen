/*
	This code was generated by SQL Compact Code Generator version 1.2.1.5

	SQL Compact Code Generator was written by Christian Resma Helle (http://sqlcecodegen.codeplex.com)
	and is under the GNU General Public License version 2 (GPLv2)

	Generated: 07/19/2011 18:06:46
*/



namespace ConsoleApp.TestDatabaseMultiple
{
	/// <summary>
	/// Default ICustomerRepository implementation 
	/// </summary>
	public partial class CustomerRepository : ICustomerRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<Customer> ToList()
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM Customer";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Customer[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Customer", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Customer[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<Customer> SelectById(System.Int32? Id)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE ContactId=?

		/// <summary>
		/// Retrieves a collection of items by ContactId
		/// </summary>
		/// <param name="ContactId">ContactId value</param>
		public System.Collections.Generic.List<Customer> SelectByContactId(System.Int32? ContactId)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (ContactId != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE ContactId=@ContactId";
					command.Parameters.Add("@ContactId", System.Data.SqlDbType.Int);
					command.Parameters["@ContactId"].Value = ContactId != null ? (object)ContactId : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE ContactId IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Name=?

		/// <summary>
		/// Retrieves a collection of items by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		public System.Collections.Generic.List<Customer> SelectByName(System.String Name)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Name != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE Name=@Name";
					command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE Name IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Address=?

		/// <summary>
		/// Retrieves a collection of items by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		public System.Collections.Generic.List<Customer> SelectByAddress(System.String Address)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Address != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE Address=@Address";
					command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE Address IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE City=?

		/// <summary>
		/// Retrieves a collection of items by City
		/// </summary>
		/// <param name="City">City value</param>
		public System.Collections.Generic.List<Customer> SelectByCity(System.String City)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (City != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE City=@City";
					command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
					command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE City IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE PostalCode=?

		/// <summary>
		/// Retrieves a collection of items by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		public System.Collections.Generic.List<Customer> SelectByPostalCode(System.String PostalCode)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (PostalCode != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE PostalCode=@PostalCode";
					command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
					command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE PostalCode IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Country=?

		/// <summary>
		/// Retrieves a collection of items by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		public System.Collections.Generic.List<Customer> SelectByCountry(System.String Country)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Country != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE Country=@Country";
					command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE Country IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Email=?

		/// <summary>
		/// Retrieves a collection of items by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		public System.Collections.Generic.List<Customer> SelectByEmail(System.String Email)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Email != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE Email=@Email";
					command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE Email IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Phone=?

		/// <summary>
		/// Retrieves a collection of items by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		public System.Collections.Generic.List<Customer> SelectByPhone(System.String Phone)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Phone != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE Phone=@Phone";
					command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE Phone IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Fax=?

		/// <summary>
		/// Retrieves a collection of items by Fax
		/// </summary>
		/// <param name="Fax">Fax value</param>
		public System.Collections.Generic.List<Customer> SelectByFax(System.String Fax)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Fax != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE Fax=@Fax";
					command.Parameters.Add("@Fax", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Fax"].Value = Fax != null ? (object)Fax : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE Fax IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectById(System.Int32? Id, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Id=@Id";					command.CommandText = "SELECT * FROM Customer WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE ContactId=?

		/// <summary>
		/// Retrieves the first set of items specified by count by ContactId
		/// </summary>
		/// <param name="ContactId">ContactId value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByContactId(System.Int32? ContactId, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (ContactId != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE ContactId=@ContactId";					command.CommandText = "SELECT * FROM Customer WHERE ContactId=@ContactId";
				command.Parameters.Add("@ContactId", System.Data.SqlDbType.Int);
				command.Parameters["@ContactId"].Value = ContactId != null ? (object)ContactId : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE ContactId IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Name=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByName(System.String Name, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Name != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Name=@Name";					command.CommandText = "SELECT * FROM Customer WHERE Name=@Name";
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Name IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Address=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByAddress(System.String Address, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Address != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Address=@Address";					command.CommandText = "SELECT * FROM Customer WHERE Address=@Address";
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Address IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE City=?

		/// <summary>
		/// Retrieves the first set of items specified by count by City
		/// </summary>
		/// <param name="City">City value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByCity(System.String City, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (City != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE City=@City";					command.CommandText = "SELECT * FROM Customer WHERE City=@City";
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE City IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE PostalCode=?

		/// <summary>
		/// Retrieves the first set of items specified by count by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByPostalCode(System.String PostalCode, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (PostalCode != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE PostalCode=@PostalCode";					command.CommandText = "SELECT * FROM Customer WHERE PostalCode=@PostalCode";
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE PostalCode IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Country=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByCountry(System.String Country, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Country != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Country=@Country";					command.CommandText = "SELECT * FROM Customer WHERE Country=@Country";
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Country IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Email=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByEmail(System.String Email, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Email != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Email=@Email";					command.CommandText = "SELECT * FROM Customer WHERE Email=@Email";
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Email IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Phone=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByPhone(System.String Phone, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Phone != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Phone=@Phone";					command.CommandText = "SELECT * FROM Customer WHERE Phone=@Phone";
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Phone IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Fax=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Fax
		/// </summary>
		/// <param name="Fax">Fax value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByFax(System.String Fax, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Fax != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Fax=@Fax";					command.CommandText = "SELECT * FROM Customer WHERE Fax=@Fax";
				command.Parameters.Add("@Fax", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Fax"].Value = Fax != null ? (object)Fax : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Fax IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [Customer]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(Customer item)
		{
			Create(item.ContactId, item.Name, item.Address, item.City, item.PostalCode, item.Country, item.Email, item.Phone, item.Fax);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="ContactId">ContactId value</param>
		/// <param name="Name">Name value</param>
		/// <param name="Address">Address value</param>
		/// <param name="City">City value</param>
		/// <param name="PostalCode">PostalCode value</param>
		/// <param name="Country">Country value</param>
		/// <param name="Email">Email value</param>
		/// <param name="Phone">Phone value</param>
		/// <param name="Fax">Fax value</param>
		public void Create(System.Int32? ContactId, System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone, System.String Fax)
		{
			if (Name != null && Name.Length > 100)
				throw new System.ArgumentException("Max length for Name is 100");
			if (Address != null && Address.Length > 100)
				throw new System.ArgumentException("Max length for Address is 100");
			if (City != null && City.Length > 100)
				throw new System.ArgumentException("Max length for City is 100");
			if (PostalCode != null && PostalCode.Length > 100)
				throw new System.ArgumentException("Max length for PostalCode is 100");
			if (Country != null && Country.Length > 100)
				throw new System.ArgumentException("Max length for Country is 100");
			if (Email != null && Email.Length > 100)
				throw new System.ArgumentException("Max length for Email is 100");
			if (Phone != null && Phone.Length > 100)
				throw new System.ArgumentException("Max length for Phone is 100");
			if (Fax != null && Fax.Length > 100)
				throw new System.ArgumentException("Max length for Fax is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Customer] (ContactId, Name, Address, City, PostalCode, Country, Email, Phone, Fax)  VALUES (@ContactId, @Name, @Address, @City, @PostalCode, @Country, @Email, @Phone, @Fax)";

				command.Parameters.Add("@ContactId", System.Data.SqlDbType.Int);
				command.Parameters["@ContactId"].Value = ContactId != null ? (object)ContactId : System.DBNull.Value;
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;
				command.Parameters.Add("@Fax", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Fax"].Value = Fax != null ? (object)Fax : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [Customer] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="ContactId">ContactId value</param>
		/// <param name="Name">Name value</param>
		/// <param name="Address">Address value</param>
		/// <param name="City">City value</param>
		/// <param name="PostalCode">PostalCode value</param>
		/// <param name="Country">Country value</param>
		/// <param name="Email">Email value</param>
		/// <param name="Phone">Phone value</param>
		/// <param name="Fax">Fax value</param>
		public void Create(System.Int32? Id, System.Int32? ContactId, System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone, System.String Fax)
		{
			if (Name != null && Name.Length > Customer.Name_Max_Length)
				throw new System.ArgumentException("Max length for Name is 100");
			if (Address != null && Address.Length > Customer.Address_Max_Length)
				throw new System.ArgumentException("Max length for Address is 100");
			if (City != null && City.Length > Customer.City_Max_Length)
				throw new System.ArgumentException("Max length for City is 100");
			if (PostalCode != null && PostalCode.Length > Customer.PostalCode_Max_Length)
				throw new System.ArgumentException("Max length for PostalCode is 100");
			if (Country != null && Country.Length > Customer.Country_Max_Length)
				throw new System.ArgumentException("Max length for Country is 100");
			if (Email != null && Email.Length > Customer.Email_Max_Length)
				throw new System.ArgumentException("Max length for Email is 100");
			if (Phone != null && Phone.Length > Customer.Phone_Max_Length)
				throw new System.ArgumentException("Max length for Phone is 100");
			if (Fax != null && Fax.Length > Customer.Fax_Max_Length)
				throw new System.ArgumentException("Max length for Fax is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Customer] (Id, ContactId, Name, Address, City, PostalCode, Country, Email, Phone, Fax)  VALUES (@Id, @ContactId, @Name, @Address, @City, @PostalCode, @Country, @Email, @Phone, @Fax)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@ContactId", System.Data.SqlDbType.Int);
				command.Parameters["@ContactId"].Value = ContactId != null ? (object)ContactId : System.DBNull.Value;
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;
				command.Parameters.Add("@Fax", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Fax"].Value = Fax != null ? (object)Fax : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<Customer> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "Customer";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.ContactId);
						record.SetValue(2, item.Name);
						record.SetValue(3, item.Address);
						record.SetValue(4, item.City);
						record.SetValue(5, item.PostalCode);
						record.SetValue(6, item.Country);
						record.SetValue(7, item.Email);
						record.SetValue(8, item.Phone);
						record.SetValue(9, item.Fax);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(Customer item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<Customer> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;

					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int32? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY ContactId

		/// <summary>
		/// Delete records by ContactId
		/// </summary>
		/// <param name="ContactId">ContactId value</param>
		public int DeleteByContactId(System.Int32? ContactId)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE ContactId=@ContactId";
				command.Parameters.Add("@ContactId", System.Data.SqlDbType.Int);
				command.Parameters["@ContactId"].Value = ContactId != null ? (object)ContactId : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Name

		/// <summary>
		/// Delete records by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		public int DeleteByName(System.String Name)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Name=@Name";
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Address

		/// <summary>
		/// Delete records by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		public int DeleteByAddress(System.String Address)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Address=@Address";
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY City

		/// <summary>
		/// Delete records by City
		/// </summary>
		/// <param name="City">City value</param>
		public int DeleteByCity(System.String City)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE City=@City";
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY PostalCode

		/// <summary>
		/// Delete records by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		public int DeleteByPostalCode(System.String PostalCode)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE PostalCode=@PostalCode";
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Country

		/// <summary>
		/// Delete records by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		public int DeleteByCountry(System.String Country)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Country=@Country";
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Email

		/// <summary>
		/// Delete records by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		public int DeleteByEmail(System.String Email)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Email=@Email";
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Phone

		/// <summary>
		/// Delete records by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		public int DeleteByPhone(System.String Phone)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Phone=@Phone";
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Fax

		/// <summary>
		/// Delete records by Fax
		/// </summary>
		/// <param name="Fax">Fax value</param>
		public int DeleteByFax(System.String Fax)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Fax=@Fax";
				command.Parameters.Add("@Fax", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Fax"].Value = Fax != null ? (object)Fax : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(Customer item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Customer] SET ContactId = @ContactId, Name = @Name, Address = @Address, City = @City, PostalCode = @PostalCode, Country = @Country, Email = @Email, Phone = @Phone, Fax = @Fax WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@ContactId", System.Data.SqlDbType.Int);
				command.Parameters["@ContactId"].Value = item.ContactId != null ? (object)item.ContactId : System.DBNull.Value;
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = item.Name != null ? (object)item.Name : System.DBNull.Value;
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = item.Address != null ? (object)item.Address : System.DBNull.Value;
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = item.City != null ? (object)item.City : System.DBNull.Value;
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = item.PostalCode != null ? (object)item.PostalCode : System.DBNull.Value;
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = item.Country != null ? (object)item.Country : System.DBNull.Value;
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = item.Email != null ? (object)item.Email : System.DBNull.Value;
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = item.Phone != null ? (object)item.Phone : System.DBNull.Value;
				command.Parameters.Add("@Fax", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Fax"].Value = item.Fax != null ? (object)item.Fax : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<Customer> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Customer] SET ContactId = @ContactId, Name = @Name, Address = @Address, City = @City, PostalCode = @PostalCode, Country = @Country, Email = @Email, Phone = @Phone, Fax = @Fax WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters.Add("@ContactId", System.Data.SqlDbType.Int);
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Fax", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@ContactId"].Value = item.ContactId != null ? (object)item.ContactId : System.DBNull.Value;
					command.Parameters["@Name"].Value = item.Name != null ? (object)item.Name : System.DBNull.Value;
					command.Parameters["@Address"].Value = item.Address != null ? (object)item.Address : System.DBNull.Value;
					command.Parameters["@City"].Value = item.City != null ? (object)item.City : System.DBNull.Value;
					command.Parameters["@PostalCode"].Value = item.PostalCode != null ? (object)item.PostalCode : System.DBNull.Value;
					command.Parameters["@Country"].Value = item.Country != null ? (object)item.Country : System.DBNull.Value;
					command.Parameters["@Email"].Value = item.Email != null ? (object)item.Email : System.DBNull.Value;
					command.Parameters["@Phone"].Value = item.Phone != null ? (object)item.Phone : System.DBNull.Value;
					command.Parameters["@Fax"].Value = item.Fax != null ? (object)item.Fax : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [Customer]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM Customer";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}
}

