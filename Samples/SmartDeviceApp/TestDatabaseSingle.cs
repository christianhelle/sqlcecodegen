
/*
	This code was generated by SQL Compact Code Generator version 1.2.1.5

	SQL Compact Code Generator was written by Christian Resma Helle (http://sqlcecodegen.codeplex.com)
	and is under the GNU General Public License version 2 (GPLv2)

	Generated: 07/19/2011 17:29:29
*/


namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Represents the Contact table
	/// </summary>
	public partial class Contact
	{
		private System.Int32? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int32? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.String _Name;
		/// <summary>
		/// The Maximum Length the Name field allows
		/// </summary>
		public const int Name_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Name
		/// </summary>
		public System.String Name
		{
			get { return _Name; }
			set
			{
				_Name = value;
				if (_Name != null && Name.Length > Name_Max_Length)
					throw new System.ArgumentException("Max length for Name is 100");
			}
		}
		private System.String _Address;
		/// <summary>
		/// The Maximum Length the Address field allows
		/// </summary>
		public const int Address_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Address
		/// </summary>
		public System.String Address
		{
			get { return _Address; }
			set
			{
				_Address = value;
				if (_Address != null && Address.Length > Address_Max_Length)
					throw new System.ArgumentException("Max length for Address is 100");
			}
		}
		private System.String _City;
		/// <summary>
		/// The Maximum Length the City field allows
		/// </summary>
		public const int City_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of City
		/// </summary>
		public System.String City
		{
			get { return _City; }
			set
			{
				_City = value;
				if (_City != null && City.Length > City_Max_Length)
					throw new System.ArgumentException("Max length for City is 100");
			}
		}
		private System.String _PostalCode;
		/// <summary>
		/// The Maximum Length the PostalCode field allows
		/// </summary>
		public const int PostalCode_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of PostalCode
		/// </summary>
		public System.String PostalCode
		{
			get { return _PostalCode; }
			set
			{
				_PostalCode = value;
				if (_PostalCode != null && PostalCode.Length > PostalCode_Max_Length)
					throw new System.ArgumentException("Max length for PostalCode is 100");
			}
		}
		private System.String _Country;
		/// <summary>
		/// The Maximum Length the Country field allows
		/// </summary>
		public const int Country_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Country
		/// </summary>
		public System.String Country
		{
			get { return _Country; }
			set
			{
				_Country = value;
				if (_Country != null && Country.Length > Country_Max_Length)
					throw new System.ArgumentException("Max length for Country is 100");
			}
		}
		private System.String _Email;
		/// <summary>
		/// The Maximum Length the Email field allows
		/// </summary>
		public const int Email_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Email
		/// </summary>
		public System.String Email
		{
			get { return _Email; }
			set
			{
				_Email = value;
				if (_Email != null && Email.Length > Email_Max_Length)
					throw new System.ArgumentException("Max length for Email is 100");
			}
		}
		private System.String _Phone;
		/// <summary>
		/// The Maximum Length the Phone field allows
		/// </summary>
		public const int Phone_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Phone
		/// </summary>
		public System.String Phone
		{
			get { return _Phone; }
			set
			{
				_Phone = value;
				if (_Phone != null && Phone.Length > Phone_Max_Length)
					throw new System.ArgumentException("Max length for Phone is 100");
			}
		}
	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Represents the Customer table
	/// </summary>
	public partial class Customer
	{
		private System.Int32? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int32? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.Int32? _ContactId;
		/// <summary>
		/// Gets or sets the value of ContactId
		/// </summary>
		public System.Int32? ContactId
		{
			get { return _ContactId; }
			set
			{
				_ContactId = value;
			}
		}
		private System.String _Name;
		/// <summary>
		/// The Maximum Length the Name field allows
		/// </summary>
		public const int Name_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Name
		/// </summary>
		public System.String Name
		{
			get { return _Name; }
			set
			{
				_Name = value;
				if (_Name != null && Name.Length > Name_Max_Length)
					throw new System.ArgumentException("Max length for Name is 100");
			}
		}
		private System.String _Address;
		/// <summary>
		/// The Maximum Length the Address field allows
		/// </summary>
		public const int Address_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Address
		/// </summary>
		public System.String Address
		{
			get { return _Address; }
			set
			{
				_Address = value;
				if (_Address != null && Address.Length > Address_Max_Length)
					throw new System.ArgumentException("Max length for Address is 100");
			}
		}
		private System.String _City;
		/// <summary>
		/// The Maximum Length the City field allows
		/// </summary>
		public const int City_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of City
		/// </summary>
		public System.String City
		{
			get { return _City; }
			set
			{
				_City = value;
				if (_City != null && City.Length > City_Max_Length)
					throw new System.ArgumentException("Max length for City is 100");
			}
		}
		private System.String _PostalCode;
		/// <summary>
		/// The Maximum Length the PostalCode field allows
		/// </summary>
		public const int PostalCode_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of PostalCode
		/// </summary>
		public System.String PostalCode
		{
			get { return _PostalCode; }
			set
			{
				_PostalCode = value;
				if (_PostalCode != null && PostalCode.Length > PostalCode_Max_Length)
					throw new System.ArgumentException("Max length for PostalCode is 100");
			}
		}
		private System.String _Country;
		/// <summary>
		/// The Maximum Length the Country field allows
		/// </summary>
		public const int Country_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Country
		/// </summary>
		public System.String Country
		{
			get { return _Country; }
			set
			{
				_Country = value;
				if (_Country != null && Country.Length > Country_Max_Length)
					throw new System.ArgumentException("Max length for Country is 100");
			}
		}
		private System.String _Email;
		/// <summary>
		/// The Maximum Length the Email field allows
		/// </summary>
		public const int Email_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Email
		/// </summary>
		public System.String Email
		{
			get { return _Email; }
			set
			{
				_Email = value;
				if (_Email != null && Email.Length > Email_Max_Length)
					throw new System.ArgumentException("Max length for Email is 100");
			}
		}
		private System.String _Phone;
		/// <summary>
		/// The Maximum Length the Phone field allows
		/// </summary>
		public const int Phone_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Phone
		/// </summary>
		public System.String Phone
		{
			get { return _Phone; }
			set
			{
				_Phone = value;
				if (_Phone != null && Phone.Length > Phone_Max_Length)
					throw new System.ArgumentException("Max length for Phone is 100");
			}
		}
		private System.String _Fax;
		/// <summary>
		/// The Maximum Length the Fax field allows
		/// </summary>
		public const int Fax_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Fax
		/// </summary>
		public System.String Fax
		{
			get { return _Fax; }
			set
			{
				_Fax = value;
				if (_Fax != null && Fax.Length > Fax_Max_Length)
					throw new System.ArgumentException("Max length for Fax is 100");
			}
		}
	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Represents the Product table
	/// </summary>
	public partial class Product
	{
		private System.Int32? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int32? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.String _PartNumber;
		/// <summary>
		/// The Maximum Length the PartNumber field allows
		/// </summary>
		public const int PartNumber_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of PartNumber
		/// </summary>
		public System.String PartNumber
		{
			get { return _PartNumber; }
			set
			{
				_PartNumber = value;
				if (_PartNumber != null && PartNumber.Length > PartNumber_Max_Length)
					throw new System.ArgumentException("Max length for PartNumber is 100");
			}
		}
		private System.String _Ean13;
		/// <summary>
		/// The Maximum Length the Ean13 field allows
		/// </summary>
		public const int Ean13_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Ean13
		/// </summary>
		public System.String Ean13
		{
			get { return _Ean13; }
			set
			{
				_Ean13 = value;
				if (_Ean13 != null && Ean13.Length > Ean13_Max_Length)
					throw new System.ArgumentException("Max length for Ean13 is 100");
			}
		}
		private System.String _Name;
		/// <summary>
		/// The Maximum Length the Name field allows
		/// </summary>
		public const int Name_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Name
		/// </summary>
		public System.String Name
		{
			get { return _Name; }
			set
			{
				_Name = value;
				if (_Name != null && Name.Length > Name_Max_Length)
					throw new System.ArgumentException("Max length for Name is 100");
			}
		}
		private System.String _Description;
		/// <summary>
		/// The Maximum Length the Description field allows
		/// </summary>
		public const int Description_Max_Length = 100;
		/// <summary>
		/// Gets or sets the value of Description
		/// </summary>
		public System.String Description
		{
			get { return _Description; }
			set
			{
				_Description = value;
				if (_Description != null && Description.Length > Description_Max_Length)
					throw new System.ArgumentException("Max length for Description is 100");
			}
		}
		private System.Decimal? _Rating;
		/// <summary>
		/// Gets or sets the value of Rating
		/// </summary>
		public System.Decimal? Rating
		{
			get { return _Rating; }
			set
			{
				_Rating = value;
			}
		}
	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Represents the Stock table
	/// </summary>
	public partial class Stock
	{
		private System.Int32? _Id;
		/// <summary>
		/// Gets or sets the value of Id
		/// </summary>
		public System.Int32? Id
		{
			get { return _Id; }
			set
			{
				_Id = value;
			}
		}
		private System.Int32? _ProductId;
		/// <summary>
		/// Gets or sets the value of ProductId
		/// </summary>
		public System.Int32? ProductId
		{
			get { return _ProductId; }
			set
			{
				_ProductId = value;
			}
		}
		private System.Int32? _Quantity;
		/// <summary>
		/// Gets or sets the value of Quantity
		/// </summary>
		public System.Int32? Quantity
		{
			get { return _Quantity; }
			set
			{
				_Quantity = value;
			}
		}
		private System.DateTime? _LastUpdated;
		/// <summary>
		/// Gets or sets the value of LastUpdated
		/// </summary>
		public System.DateTime? LastUpdated
		{
			get { return _LastUpdated; }
			set
			{
				_LastUpdated = value;
			}
		}
	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Base class for all data access repositories
	/// </summary>
	public static class EntityBase
	{
		private static System.Data.SqlServerCe.SqlCeConnection connectionInstance = null;
		private static readonly object syncLock = new object();

		static EntityBase()
		{
			ConnectionString = "Data Source='TestDatabaseSingle.sdf'";
		}

		/// <summary>
		/// Gets or sets the global SQL CE Connection String to be used
		/// </summary>
		public static System.String ConnectionString { get; set; }

		/// <summary>
		/// Gets or sets the global SQL CE Connection instance
		/// </summary>
		public static System.Data.SqlServerCe.SqlCeConnection Connection
		{
			get
			{
				lock (syncLock)
				{
					if (connectionInstance == null)
						connectionInstance = new System.Data.SqlServerCe.SqlCeConnection(ConnectionString);
					if (connectionInstance.State != System.Data.ConnectionState.Open)
						connectionInstance.Open();
					return connectionInstance;
				}
			}
			set
			{
				lock (syncLock)
					connectionInstance = value;
			}
		}

		/// <summary>
		/// Create a SqlCeCommand instance using the global SQL CE Conection instance
		/// </summary>
		public static System.Data.SqlServerCe.SqlCeCommand CreateCommand()
		{
			return CreateCommand(null);
		}

		/// <summary>
		/// Create a SqlCeCommand instance using the global SQL CE Conection instance and associate this with a transaction
		/// </summary>
		/// <param name="transaction">SqlCeTransaction to be used for the SqlCeCommand</param>
		public static System.Data.SqlServerCe.SqlCeCommand CreateCommand(System.Data.SqlServerCe.SqlCeTransaction transaction)
		{
			var command = Connection.CreateCommand();
			command.Transaction = transaction;
			return command;
		}
	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Helper class for generating the database file in runtime
	/// </summary>
	public static class DatabaseFile
	{
		/// <summary>
		/// Creates the database
		/// </summary>
		public static int CreateDatabase()
		{
			int resultCount = 0;

			using (var engine = new System.Data.SqlServerCe.SqlCeEngine(EntityBase.ConnectionString))
				engine.CreateDatabase();

			using (var transaction = EntityBase.Connection.BeginTransaction())
			using (var command = EntityBase.CreateCommand(transaction))
			{
				command.CommandText = "CREATE TABLE [Contact](Id INT IDENTITY(1,1) PRIMARY KEY NOT NULL, Name NVARCHAR(100), Address NVARCHAR(100), City NVARCHAR(100), PostalCode NVARCHAR(100), Country NVARCHAR(100), Email NVARCHAR(100), Phone NVARCHAR(100))";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [Customer](Id INT IDENTITY(1,1) PRIMARY KEY NOT NULL, ContactId INT, Name NVARCHAR(100), Address NVARCHAR(100), City NVARCHAR(100), PostalCode NVARCHAR(100), Country NVARCHAR(100), Email NVARCHAR(100), Phone NVARCHAR(100), Fax NVARCHAR(100))";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [Product](Id INT IDENTITY(1,1) PRIMARY KEY NOT NULL, PartNumber NVARCHAR(100), Ean13 NVARCHAR(100), Name NVARCHAR(100), Description NVARCHAR(100), Rating NUMERIC)";
				resultCount += command.ExecuteNonQuery();

				command.CommandText = "CREATE TABLE [Stock](Id INT IDENTITY(1,1) PRIMARY KEY NOT NULL, ProductId INT, Quantity INT, LastUpdated DATETIME)";
				resultCount += command.ExecuteNonQuery();
				transaction.Commit();
			}

			return resultCount;
		}
	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Base Repository interface defining the basic and commonly used data access methods
	/// </summary>
	public partial interface IRepository<T>
	{
		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		System.Collections.Generic.List<T> ToList();

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		System.Collections.Generic.List<T> ToList(int count);

		/// <summary>
		/// Retrieves all items as an array of T
		/// </summary>
		T[] ToArray();

		/// <summary>
		/// Retrieves the first set of items specific by count as an array of T
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		T[] ToArray(int count);

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to be inserted to the database</param>
		void Create(T item);

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		/// <param name="items">Items to be inserted to the database</param>
		void Create(System.Collections.Generic.IEnumerable<T> items);

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to be updated on the database</param>
		void Update(T item);

		/// <summary>
		/// Updates a collection items
		/// </summary>
		/// <param name="items">Items to be updated on the database</param>
		void Update(System.Collections.Generic.IEnumerable<T> items);

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to be deleted from the database</param>
		void Delete(T item);

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to be deleted from the database</param>
		void Delete(System.Collections.Generic.IEnumerable<T> items);

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		int Purge();

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		int Count();
	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Main Data Repository interface containing all table repositories
	/// </summary>
	public partial interface IDataRepository : System.IDisposable
	{
		/// <summary>
		/// Gets an instance of the IContactRepository
		/// </summary>
		IContactRepository Contact { get; }

		/// <summary>
		/// Gets an instance of the ICustomerRepository
		/// </summary>
		ICustomerRepository Customer { get; }

		/// <summary>
		/// Gets an instance of the IProductRepository
		/// </summary>
		IProductRepository Product { get; }

		/// <summary>
		/// Gets an instance of the IStockRepository
		/// </summary>
		IStockRepository Stock { get; }

		/// <summary>
		/// Starts a SqlCeTransaction using the global SQL CE Conection instance
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction BeginTransaction();

		/// <summary>
		/// Commits the transaction
		/// </summary>
		void Commit();

		/// <summary>
		/// Rollbacks the transaction
		/// </summary>
		void Rollback();
	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Main Data Repository implementation containing all default table repositories implementations
	/// </summary>
	public partial class DataRepository : IDataRepository
	{
		private System.Data.SqlServerCe.SqlCeTransaction transaction = null;

		/// <summary>
		/// Creates an instance of DataRepository
		/// </summary>
		public DataRepository()
		{
			Contact = new ContactRepository();
			Customer = new CustomerRepository();
			Product = new ProductRepository();
			Stock = new StockRepository();
		}

		/// <summary>
		/// Creates an instance of DataRepository
		/// </summary>
		/// <param name="connectionString">Connection string to use</param>
		public DataRepository(string connectionString) : this()
		{
			EntityBase.ConnectionString = connectionString;
		}

		/// <summary>
		/// Gets an instance of the IContactRepository
		/// </summary>
		public IContactRepository Contact { get; private set; }

		/// <summary>
		/// Gets an instance of the ICustomerRepository
		/// </summary>
		public ICustomerRepository Customer { get; private set; }

		/// <summary>
		/// Gets an instance of the IProductRepository
		/// </summary>
		public IProductRepository Product { get; private set; }

		/// <summary>
		/// Gets an instance of the IStockRepository
		/// </summary>
		public IStockRepository Stock { get; private set; }

		/// <summary>
		/// Starts a SqlCeTransaction using the global SQL CE Conection instance
		/// </summary>
		public System.Data.SqlServerCe.SqlCeTransaction BeginTransaction()
		{
			if (transaction != null)
				throw new System.InvalidOperationException("A transaction has already been started. Only one transaction is allowed");
			transaction = EntityBase.Connection.BeginTransaction();
			Contact.Transaction = transaction;
			Customer.Transaction = transaction;
			Product.Transaction = transaction;
			Stock.Transaction = transaction;
			return transaction;
		}

		/// <summary>
		/// Commits the transaction
		/// </summary>
		public void Commit()
		{
			if (transaction == null)
				throw new System.InvalidOperationException("No transaction has been started");
			transaction.Commit();
		}

		/// <summary>
		/// Rollbacks the transaction
		/// </summary>
		public void Rollback()
		{
			if (transaction == null)
				throw new System.InvalidOperationException("No transaction has been started");
			transaction.Rollback();
		}

		/// <summary>
		/// Releases the resources used. All uncommitted transactions are rolled back
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
		}

		protected void Dispose(bool disposing)
		{
			if (disposed) return;
			if (disposing)
			{
				if (transaction != null)
				{
					transaction.Dispose();
					transaction = null;
				}
			}
			disposed = true;
		}

		private bool disposed = false;

		~DataRepository()
		{
			Dispose(false);
		}
	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Represents the Contact repository
	/// </summary>
	public partial interface IContactRepository : IRepository<Contact>
	{
		/// <summary>
		/// Transaction instance created from <see cref="IDataRepository" />
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<Contact> SelectById(System.Int32? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Contact> SelectById(System.Int32? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		System.Collections.Generic.List<Contact> SelectByName(System.String Name);

		/// <summary>
		/// Retrieves the first set of items specified by count by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Contact> SelectByName(System.String Name, int count);

		/// <summary>
		/// Retrieves a collection of items by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		System.Collections.Generic.List<Contact> SelectByAddress(System.String Address);

		/// <summary>
		/// Retrieves the first set of items specified by count by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Contact> SelectByAddress(System.String Address, int count);

		/// <summary>
		/// Retrieves a collection of items by City
		/// </summary>
		/// <param name="City">City value</param>
		System.Collections.Generic.List<Contact> SelectByCity(System.String City);

		/// <summary>
		/// Retrieves the first set of items specified by count by City
		/// </summary>
		/// <param name="City">City value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Contact> SelectByCity(System.String City, int count);

		/// <summary>
		/// Retrieves a collection of items by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		System.Collections.Generic.List<Contact> SelectByPostalCode(System.String PostalCode);

		/// <summary>
		/// Retrieves the first set of items specified by count by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Contact> SelectByPostalCode(System.String PostalCode, int count);

		/// <summary>
		/// Retrieves a collection of items by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		System.Collections.Generic.List<Contact> SelectByCountry(System.String Country);

		/// <summary>
		/// Retrieves the first set of items specified by count by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Contact> SelectByCountry(System.String Country, int count);

		/// <summary>
		/// Retrieves a collection of items by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		System.Collections.Generic.List<Contact> SelectByEmail(System.String Email);

		/// <summary>
		/// Retrieves the first set of items specified by count by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Contact> SelectByEmail(System.String Email, int count);

		/// <summary>
		/// Retrieves a collection of items by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		System.Collections.Generic.List<Contact> SelectByPhone(System.String Phone);

		/// <summary>
		/// Retrieves the first set of items specified by count by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Contact> SelectByPhone(System.String Phone, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int32? Id);

		/// <summary>
		/// Delete records by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		int DeleteByName(System.String Name);

		/// <summary>
		/// Delete records by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		int DeleteByAddress(System.String Address);

		/// <summary>
		/// Delete records by City
		/// </summary>
		/// <param name="City">City value</param>
		int DeleteByCity(System.String City);

		/// <summary>
		/// Delete records by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		int DeleteByPostalCode(System.String PostalCode);

		/// <summary>
		/// Delete records by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		int DeleteByCountry(System.String Country);

		/// <summary>
		/// Delete records by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		int DeleteByEmail(System.String Email);

		/// <summary>
		/// Delete records by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		int DeleteByPhone(System.String Phone);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int32? Id, System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone);
	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Default IContactRepository implementation 
	/// </summary>
	public partial class ContactRepository : IContactRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<Contact> ToList()
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM Contact";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Contact[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Contact> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Contact", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Contact[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<Contact> SelectById(System.Int32? Id)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM Contact WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Contact WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Name=?

		/// <summary>
		/// Retrieves a collection of items by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		public System.Collections.Generic.List<Contact> SelectByName(System.String Name)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Name != null)
				{
					command.CommandText = "SELECT * FROM Contact WHERE Name=@Name";
					command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Contact WHERE Name IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Address=?

		/// <summary>
		/// Retrieves a collection of items by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		public System.Collections.Generic.List<Contact> SelectByAddress(System.String Address)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Address != null)
				{
					command.CommandText = "SELECT * FROM Contact WHERE Address=@Address";
					command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Contact WHERE Address IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE City=?

		/// <summary>
		/// Retrieves a collection of items by City
		/// </summary>
		/// <param name="City">City value</param>
		public System.Collections.Generic.List<Contact> SelectByCity(System.String City)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (City != null)
				{
					command.CommandText = "SELECT * FROM Contact WHERE City=@City";
					command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
					command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Contact WHERE City IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE PostalCode=?

		/// <summary>
		/// Retrieves a collection of items by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		public System.Collections.Generic.List<Contact> SelectByPostalCode(System.String PostalCode)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (PostalCode != null)
				{
					command.CommandText = "SELECT * FROM Contact WHERE PostalCode=@PostalCode";
					command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
					command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Contact WHERE PostalCode IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Country=?

		/// <summary>
		/// Retrieves a collection of items by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		public System.Collections.Generic.List<Contact> SelectByCountry(System.String Country)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Country != null)
				{
					command.CommandText = "SELECT * FROM Contact WHERE Country=@Country";
					command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Contact WHERE Country IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Email=?

		/// <summary>
		/// Retrieves a collection of items by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		public System.Collections.Generic.List<Contact> SelectByEmail(System.String Email)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Email != null)
				{
					command.CommandText = "SELECT * FROM Contact WHERE Email=@Email";
					command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Contact WHERE Email IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Phone=?

		/// <summary>
		/// Retrieves a collection of items by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		public System.Collections.Generic.List<Contact> SelectByPhone(System.String Phone)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Phone != null)
				{
					command.CommandText = "SELECT * FROM Contact WHERE Phone=@Phone";
					command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Contact WHERE Phone IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Contact> SelectById(System.Int32? Id, int count)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Id=@Id";					command.CommandText = "SELECT * FROM Contact WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Name=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Contact> SelectByName(System.String Name, int count)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Name != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Name=@Name";					command.CommandText = "SELECT * FROM Contact WHERE Name=@Name";
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Name IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Address=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Contact> SelectByAddress(System.String Address, int count)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Address != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Address=@Address";					command.CommandText = "SELECT * FROM Contact WHERE Address=@Address";
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Address IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE City=?

		/// <summary>
		/// Retrieves the first set of items specified by count by City
		/// </summary>
		/// <param name="City">City value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Contact> SelectByCity(System.String City, int count)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (City != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE City=@City";					command.CommandText = "SELECT * FROM Contact WHERE City=@City";
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE City IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE PostalCode=?

		/// <summary>
		/// Retrieves the first set of items specified by count by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Contact> SelectByPostalCode(System.String PostalCode, int count)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (PostalCode != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE PostalCode=@PostalCode";					command.CommandText = "SELECT * FROM Contact WHERE PostalCode=@PostalCode";
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE PostalCode IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Country=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Contact> SelectByCountry(System.String Country, int count)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Country != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Country=@Country";					command.CommandText = "SELECT * FROM Contact WHERE Country=@Country";
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Country IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Email=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Contact> SelectByEmail(System.String Email, int count)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Email != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Email=@Email";					command.CommandText = "SELECT * FROM Contact WHERE Email=@Email";
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Email IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Phone=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Contact> SelectByPhone(System.String Phone, int count)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Phone != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Phone=@Phone";					command.CommandText = "SELECT * FROM Contact WHERE Phone=@Phone";
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Phone IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.Name = (reader.IsDBNull(1) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(2) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(3) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(4) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(5) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(6) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(7) ? null : reader["Phone"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [Contact]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(Contact item)
		{
			Create(item.Name, item.Address, item.City, item.PostalCode, item.Country, item.Email, item.Phone);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="Name">Name value</param>
		/// <param name="Address">Address value</param>
		/// <param name="City">City value</param>
		/// <param name="PostalCode">PostalCode value</param>
		/// <param name="Country">Country value</param>
		/// <param name="Email">Email value</param>
		/// <param name="Phone">Phone value</param>
		public void Create(System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone)
		{
			if (Name != null && Name.Length > 100)
				throw new System.ArgumentException("Max length for Name is 100");
			if (Address != null && Address.Length > 100)
				throw new System.ArgumentException("Max length for Address is 100");
			if (City != null && City.Length > 100)
				throw new System.ArgumentException("Max length for City is 100");
			if (PostalCode != null && PostalCode.Length > 100)
				throw new System.ArgumentException("Max length for PostalCode is 100");
			if (Country != null && Country.Length > 100)
				throw new System.ArgumentException("Max length for Country is 100");
			if (Email != null && Email.Length > 100)
				throw new System.ArgumentException("Max length for Email is 100");
			if (Phone != null && Phone.Length > 100)
				throw new System.ArgumentException("Max length for Phone is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Contact] (Name, Address, City, PostalCode, Country, Email, Phone)  VALUES (@Name, @Address, @City, @PostalCode, @Country, @Email, @Phone)";

				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [Contact] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="Name">Name value</param>
		/// <param name="Address">Address value</param>
		/// <param name="City">City value</param>
		/// <param name="PostalCode">PostalCode value</param>
		/// <param name="Country">Country value</param>
		/// <param name="Email">Email value</param>
		/// <param name="Phone">Phone value</param>
		public void Create(System.Int32? Id, System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone)
		{
			if (Name != null && Name.Length > Contact.Name_Max_Length)
				throw new System.ArgumentException("Max length for Name is 100");
			if (Address != null && Address.Length > Contact.Address_Max_Length)
				throw new System.ArgumentException("Max length for Address is 100");
			if (City != null && City.Length > Contact.City_Max_Length)
				throw new System.ArgumentException("Max length for City is 100");
			if (PostalCode != null && PostalCode.Length > Contact.PostalCode_Max_Length)
				throw new System.ArgumentException("Max length for PostalCode is 100");
			if (Country != null && Country.Length > Contact.Country_Max_Length)
				throw new System.ArgumentException("Max length for Country is 100");
			if (Email != null && Email.Length > Contact.Email_Max_Length)
				throw new System.ArgumentException("Max length for Email is 100");
			if (Phone != null && Phone.Length > Contact.Phone_Max_Length)
				throw new System.ArgumentException("Max length for Phone is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Contact] (Id, Name, Address, City, PostalCode, Country, Email, Phone)  VALUES (@Id, @Name, @Address, @City, @PostalCode, @Country, @Email, @Phone)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<Contact> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "Contact";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.Name);
						record.SetValue(2, item.Address);
						record.SetValue(3, item.City);
						record.SetValue(4, item.PostalCode);
						record.SetValue(5, item.Country);
						record.SetValue(6, item.Email);
						record.SetValue(7, item.Phone);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(Contact item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Contact] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<Contact> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Contact] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;

					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int32? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Contact] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Name

		/// <summary>
		/// Delete records by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		public int DeleteByName(System.String Name)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Contact] WHERE Name=@Name";
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Address

		/// <summary>
		/// Delete records by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		public int DeleteByAddress(System.String Address)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Contact] WHERE Address=@Address";
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY City

		/// <summary>
		/// Delete records by City
		/// </summary>
		/// <param name="City">City value</param>
		public int DeleteByCity(System.String City)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Contact] WHERE City=@City";
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY PostalCode

		/// <summary>
		/// Delete records by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		public int DeleteByPostalCode(System.String PostalCode)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Contact] WHERE PostalCode=@PostalCode";
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Country

		/// <summary>
		/// Delete records by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		public int DeleteByCountry(System.String Country)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Contact] WHERE Country=@Country";
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Email

		/// <summary>
		/// Delete records by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		public int DeleteByEmail(System.String Email)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Contact] WHERE Email=@Email";
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Phone

		/// <summary>
		/// Delete records by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		public int DeleteByPhone(System.String Phone)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Contact] WHERE Phone=@Phone";
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Contact]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(Contact item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Contact] SET Name = @Name, Address = @Address, City = @City, PostalCode = @PostalCode, Country = @Country, Email = @Email, Phone = @Phone WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = item.Name != null ? (object)item.Name : System.DBNull.Value;
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = item.Address != null ? (object)item.Address : System.DBNull.Value;
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = item.City != null ? (object)item.City : System.DBNull.Value;
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = item.PostalCode != null ? (object)item.PostalCode : System.DBNull.Value;
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = item.Country != null ? (object)item.Country : System.DBNull.Value;
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = item.Email != null ? (object)item.Email : System.DBNull.Value;
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = item.Phone != null ? (object)item.Phone : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<Contact> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Contact] SET Name = @Name, Address = @Address, City = @City, PostalCode = @PostalCode, Country = @Country, Email = @Email, Phone = @Phone WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@Name"].Value = item.Name != null ? (object)item.Name : System.DBNull.Value;
					command.Parameters["@Address"].Value = item.Address != null ? (object)item.Address : System.DBNull.Value;
					command.Parameters["@City"].Value = item.City != null ? (object)item.City : System.DBNull.Value;
					command.Parameters["@PostalCode"].Value = item.PostalCode != null ? (object)item.PostalCode : System.DBNull.Value;
					command.Parameters["@Country"].Value = item.Country != null ? (object)item.Country : System.DBNull.Value;
					command.Parameters["@Email"].Value = item.Email != null ? (object)item.Email : System.DBNull.Value;
					command.Parameters["@Phone"].Value = item.Phone != null ? (object)item.Phone : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [Contact]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM Contact";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Represents the Customer repository
	/// </summary>
	public partial interface ICustomerRepository : IRepository<Customer>
	{
		/// <summary>
		/// Transaction instance created from <see cref="IDataRepository" />
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<Customer> SelectById(System.Int32? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Customer> SelectById(System.Int32? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by ContactId
		/// </summary>
		/// <param name="ContactId">ContactId value</param>
		System.Collections.Generic.List<Customer> SelectByContactId(System.Int32? ContactId);

		/// <summary>
		/// Retrieves the first set of items specified by count by ContactId
		/// </summary>
		/// <param name="ContactId">ContactId value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Customer> SelectByContactId(System.Int32? ContactId, int count);

		/// <summary>
		/// Retrieves a collection of items by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		System.Collections.Generic.List<Customer> SelectByName(System.String Name);

		/// <summary>
		/// Retrieves the first set of items specified by count by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Customer> SelectByName(System.String Name, int count);

		/// <summary>
		/// Retrieves a collection of items by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		System.Collections.Generic.List<Customer> SelectByAddress(System.String Address);

		/// <summary>
		/// Retrieves the first set of items specified by count by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Customer> SelectByAddress(System.String Address, int count);

		/// <summary>
		/// Retrieves a collection of items by City
		/// </summary>
		/// <param name="City">City value</param>
		System.Collections.Generic.List<Customer> SelectByCity(System.String City);

		/// <summary>
		/// Retrieves the first set of items specified by count by City
		/// </summary>
		/// <param name="City">City value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Customer> SelectByCity(System.String City, int count);

		/// <summary>
		/// Retrieves a collection of items by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		System.Collections.Generic.List<Customer> SelectByPostalCode(System.String PostalCode);

		/// <summary>
		/// Retrieves the first set of items specified by count by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Customer> SelectByPostalCode(System.String PostalCode, int count);

		/// <summary>
		/// Retrieves a collection of items by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		System.Collections.Generic.List<Customer> SelectByCountry(System.String Country);

		/// <summary>
		/// Retrieves the first set of items specified by count by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Customer> SelectByCountry(System.String Country, int count);

		/// <summary>
		/// Retrieves a collection of items by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		System.Collections.Generic.List<Customer> SelectByEmail(System.String Email);

		/// <summary>
		/// Retrieves the first set of items specified by count by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Customer> SelectByEmail(System.String Email, int count);

		/// <summary>
		/// Retrieves a collection of items by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		System.Collections.Generic.List<Customer> SelectByPhone(System.String Phone);

		/// <summary>
		/// Retrieves the first set of items specified by count by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Customer> SelectByPhone(System.String Phone, int count);

		/// <summary>
		/// Retrieves a collection of items by Fax
		/// </summary>
		/// <param name="Fax">Fax value</param>
		System.Collections.Generic.List<Customer> SelectByFax(System.String Fax);

		/// <summary>
		/// Retrieves the first set of items specified by count by Fax
		/// </summary>
		/// <param name="Fax">Fax value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Customer> SelectByFax(System.String Fax, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int32? Id);

		/// <summary>
		/// Delete records by ContactId
		/// </summary>
		/// <param name="ContactId">ContactId value</param>
		int DeleteByContactId(System.Int32? ContactId);

		/// <summary>
		/// Delete records by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		int DeleteByName(System.String Name);

		/// <summary>
		/// Delete records by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		int DeleteByAddress(System.String Address);

		/// <summary>
		/// Delete records by City
		/// </summary>
		/// <param name="City">City value</param>
		int DeleteByCity(System.String City);

		/// <summary>
		/// Delete records by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		int DeleteByPostalCode(System.String PostalCode);

		/// <summary>
		/// Delete records by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		int DeleteByCountry(System.String Country);

		/// <summary>
		/// Delete records by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		int DeleteByEmail(System.String Email);

		/// <summary>
		/// Delete records by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		int DeleteByPhone(System.String Phone);

		/// <summary>
		/// Delete records by Fax
		/// </summary>
		/// <param name="Fax">Fax value</param>
		int DeleteByFax(System.String Fax);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.Int32? ContactId, System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone, System.String Fax);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int32? Id, System.Int32? ContactId, System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone, System.String Fax);
	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Default ICustomerRepository implementation 
	/// </summary>
	public partial class CustomerRepository : ICustomerRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<Customer> ToList()
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM Customer";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Customer[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Customer", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Customer[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<Customer> SelectById(System.Int32? Id)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE ContactId=?

		/// <summary>
		/// Retrieves a collection of items by ContactId
		/// </summary>
		/// <param name="ContactId">ContactId value</param>
		public System.Collections.Generic.List<Customer> SelectByContactId(System.Int32? ContactId)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (ContactId != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE ContactId=@ContactId";
					command.Parameters.Add("@ContactId", System.Data.SqlDbType.Int);
					command.Parameters["@ContactId"].Value = ContactId != null ? (object)ContactId : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE ContactId IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Name=?

		/// <summary>
		/// Retrieves a collection of items by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		public System.Collections.Generic.List<Customer> SelectByName(System.String Name)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Name != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE Name=@Name";
					command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE Name IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Address=?

		/// <summary>
		/// Retrieves a collection of items by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		public System.Collections.Generic.List<Customer> SelectByAddress(System.String Address)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Address != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE Address=@Address";
					command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE Address IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE City=?

		/// <summary>
		/// Retrieves a collection of items by City
		/// </summary>
		/// <param name="City">City value</param>
		public System.Collections.Generic.List<Customer> SelectByCity(System.String City)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (City != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE City=@City";
					command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
					command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE City IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE PostalCode=?

		/// <summary>
		/// Retrieves a collection of items by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		public System.Collections.Generic.List<Customer> SelectByPostalCode(System.String PostalCode)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (PostalCode != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE PostalCode=@PostalCode";
					command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
					command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE PostalCode IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Country=?

		/// <summary>
		/// Retrieves a collection of items by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		public System.Collections.Generic.List<Customer> SelectByCountry(System.String Country)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Country != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE Country=@Country";
					command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE Country IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Email=?

		/// <summary>
		/// Retrieves a collection of items by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		public System.Collections.Generic.List<Customer> SelectByEmail(System.String Email)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Email != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE Email=@Email";
					command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE Email IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Phone=?

		/// <summary>
		/// Retrieves a collection of items by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		public System.Collections.Generic.List<Customer> SelectByPhone(System.String Phone)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Phone != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE Phone=@Phone";
					command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE Phone IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Fax=?

		/// <summary>
		/// Retrieves a collection of items by Fax
		/// </summary>
		/// <param name="Fax">Fax value</param>
		public System.Collections.Generic.List<Customer> SelectByFax(System.String Fax)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Fax != null)
				{
					command.CommandText = "SELECT * FROM Customer WHERE Fax=@Fax";
					command.Parameters.Add("@Fax", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Fax"].Value = Fax != null ? (object)Fax : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Customer WHERE Fax IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectById(System.Int32? Id, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Id=@Id";					command.CommandText = "SELECT * FROM Customer WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE ContactId=?

		/// <summary>
		/// Retrieves the first set of items specified by count by ContactId
		/// </summary>
		/// <param name="ContactId">ContactId value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByContactId(System.Int32? ContactId, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (ContactId != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE ContactId=@ContactId";					command.CommandText = "SELECT * FROM Customer WHERE ContactId=@ContactId";
				command.Parameters.Add("@ContactId", System.Data.SqlDbType.Int);
				command.Parameters["@ContactId"].Value = ContactId != null ? (object)ContactId : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE ContactId IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Name=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByName(System.String Name, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Name != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Name=@Name";					command.CommandText = "SELECT * FROM Customer WHERE Name=@Name";
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Name IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Address=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByAddress(System.String Address, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Address != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Address=@Address";					command.CommandText = "SELECT * FROM Customer WHERE Address=@Address";
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Address IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE City=?

		/// <summary>
		/// Retrieves the first set of items specified by count by City
		/// </summary>
		/// <param name="City">City value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByCity(System.String City, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (City != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE City=@City";					command.CommandText = "SELECT * FROM Customer WHERE City=@City";
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE City IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE PostalCode=?

		/// <summary>
		/// Retrieves the first set of items specified by count by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByPostalCode(System.String PostalCode, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (PostalCode != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE PostalCode=@PostalCode";					command.CommandText = "SELECT * FROM Customer WHERE PostalCode=@PostalCode";
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE PostalCode IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Country=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByCountry(System.String Country, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Country != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Country=@Country";					command.CommandText = "SELECT * FROM Customer WHERE Country=@Country";
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Country IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Email=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByEmail(System.String Email, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Email != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Email=@Email";					command.CommandText = "SELECT * FROM Customer WHERE Email=@Email";
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Email IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Phone=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByPhone(System.String Phone, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Phone != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Phone=@Phone";					command.CommandText = "SELECT * FROM Customer WHERE Phone=@Phone";
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Phone IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Fax=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Fax
		/// </summary>
		/// <param name="Fax">Fax value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Customer> SelectByFax(System.String Fax, int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Fax != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Fax=@Fax";					command.CommandText = "SELECT * FROM Customer WHERE Fax=@Fax";
				command.Parameters.Add("@Fax", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Fax"].Value = Fax != null ? (object)Fax : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Fax IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ContactId"]);
						item.Name = (reader.IsDBNull(2) ? null : reader["Name"] as System.String);
						item.Address = (reader.IsDBNull(3) ? null : reader["Address"] as System.String);
						item.City = (reader.IsDBNull(4) ? null : reader["City"] as System.String);
						item.PostalCode = (reader.IsDBNull(5) ? null : reader["PostalCode"] as System.String);
						item.Country = (reader.IsDBNull(6) ? null : reader["Country"] as System.String);
						item.Email = (reader.IsDBNull(7) ? null : reader["Email"] as System.String);
						item.Phone = (reader.IsDBNull(8) ? null : reader["Phone"] as System.String);
						item.Fax = (reader.IsDBNull(9) ? null : reader["Fax"] as System.String);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [Customer]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(Customer item)
		{
			Create(item.ContactId, item.Name, item.Address, item.City, item.PostalCode, item.Country, item.Email, item.Phone, item.Fax);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="ContactId">ContactId value</param>
		/// <param name="Name">Name value</param>
		/// <param name="Address">Address value</param>
		/// <param name="City">City value</param>
		/// <param name="PostalCode">PostalCode value</param>
		/// <param name="Country">Country value</param>
		/// <param name="Email">Email value</param>
		/// <param name="Phone">Phone value</param>
		/// <param name="Fax">Fax value</param>
		public void Create(System.Int32? ContactId, System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone, System.String Fax)
		{
			if (Name != null && Name.Length > 100)
				throw new System.ArgumentException("Max length for Name is 100");
			if (Address != null && Address.Length > 100)
				throw new System.ArgumentException("Max length for Address is 100");
			if (City != null && City.Length > 100)
				throw new System.ArgumentException("Max length for City is 100");
			if (PostalCode != null && PostalCode.Length > 100)
				throw new System.ArgumentException("Max length for PostalCode is 100");
			if (Country != null && Country.Length > 100)
				throw new System.ArgumentException("Max length for Country is 100");
			if (Email != null && Email.Length > 100)
				throw new System.ArgumentException("Max length for Email is 100");
			if (Phone != null && Phone.Length > 100)
				throw new System.ArgumentException("Max length for Phone is 100");
			if (Fax != null && Fax.Length > 100)
				throw new System.ArgumentException("Max length for Fax is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Customer] (ContactId, Name, Address, City, PostalCode, Country, Email, Phone, Fax)  VALUES (@ContactId, @Name, @Address, @City, @PostalCode, @Country, @Email, @Phone, @Fax)";

				command.Parameters.Add("@ContactId", System.Data.SqlDbType.Int);
				command.Parameters["@ContactId"].Value = ContactId != null ? (object)ContactId : System.DBNull.Value;
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;
				command.Parameters.Add("@Fax", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Fax"].Value = Fax != null ? (object)Fax : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [Customer] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="ContactId">ContactId value</param>
		/// <param name="Name">Name value</param>
		/// <param name="Address">Address value</param>
		/// <param name="City">City value</param>
		/// <param name="PostalCode">PostalCode value</param>
		/// <param name="Country">Country value</param>
		/// <param name="Email">Email value</param>
		/// <param name="Phone">Phone value</param>
		/// <param name="Fax">Fax value</param>
		public void Create(System.Int32? Id, System.Int32? ContactId, System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone, System.String Fax)
		{
			if (Name != null && Name.Length > Customer.Name_Max_Length)
				throw new System.ArgumentException("Max length for Name is 100");
			if (Address != null && Address.Length > Customer.Address_Max_Length)
				throw new System.ArgumentException("Max length for Address is 100");
			if (City != null && City.Length > Customer.City_Max_Length)
				throw new System.ArgumentException("Max length for City is 100");
			if (PostalCode != null && PostalCode.Length > Customer.PostalCode_Max_Length)
				throw new System.ArgumentException("Max length for PostalCode is 100");
			if (Country != null && Country.Length > Customer.Country_Max_Length)
				throw new System.ArgumentException("Max length for Country is 100");
			if (Email != null && Email.Length > Customer.Email_Max_Length)
				throw new System.ArgumentException("Max length for Email is 100");
			if (Phone != null && Phone.Length > Customer.Phone_Max_Length)
				throw new System.ArgumentException("Max length for Phone is 100");
			if (Fax != null && Fax.Length > Customer.Fax_Max_Length)
				throw new System.ArgumentException("Max length for Fax is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Customer] (Id, ContactId, Name, Address, City, PostalCode, Country, Email, Phone, Fax)  VALUES (@Id, @ContactId, @Name, @Address, @City, @PostalCode, @Country, @Email, @Phone, @Fax)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@ContactId", System.Data.SqlDbType.Int);
				command.Parameters["@ContactId"].Value = ContactId != null ? (object)ContactId : System.DBNull.Value;
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;
				command.Parameters.Add("@Fax", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Fax"].Value = Fax != null ? (object)Fax : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<Customer> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "Customer";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.ContactId);
						record.SetValue(2, item.Name);
						record.SetValue(3, item.Address);
						record.SetValue(4, item.City);
						record.SetValue(5, item.PostalCode);
						record.SetValue(6, item.Country);
						record.SetValue(7, item.Email);
						record.SetValue(8, item.Phone);
						record.SetValue(9, item.Fax);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(Customer item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<Customer> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;

					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int32? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY ContactId

		/// <summary>
		/// Delete records by ContactId
		/// </summary>
		/// <param name="ContactId">ContactId value</param>
		public int DeleteByContactId(System.Int32? ContactId)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE ContactId=@ContactId";
				command.Parameters.Add("@ContactId", System.Data.SqlDbType.Int);
				command.Parameters["@ContactId"].Value = ContactId != null ? (object)ContactId : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Name

		/// <summary>
		/// Delete records by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		public int DeleteByName(System.String Name)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Name=@Name";
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Address

		/// <summary>
		/// Delete records by Address
		/// </summary>
		/// <param name="Address">Address value</param>
		public int DeleteByAddress(System.String Address)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Address=@Address";
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = Address != null ? (object)Address : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY City

		/// <summary>
		/// Delete records by City
		/// </summary>
		/// <param name="City">City value</param>
		public int DeleteByCity(System.String City)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE City=@City";
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = City != null ? (object)City : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY PostalCode

		/// <summary>
		/// Delete records by PostalCode
		/// </summary>
		/// <param name="PostalCode">PostalCode value</param>
		public int DeleteByPostalCode(System.String PostalCode)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE PostalCode=@PostalCode";
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = PostalCode != null ? (object)PostalCode : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Country

		/// <summary>
		/// Delete records by Country
		/// </summary>
		/// <param name="Country">Country value</param>
		public int DeleteByCountry(System.String Country)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Country=@Country";
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = Country != null ? (object)Country : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Email

		/// <summary>
		/// Delete records by Email
		/// </summary>
		/// <param name="Email">Email value</param>
		public int DeleteByEmail(System.String Email)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Email=@Email";
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = Email != null ? (object)Email : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Phone

		/// <summary>
		/// Delete records by Phone
		/// </summary>
		/// <param name="Phone">Phone value</param>
		public int DeleteByPhone(System.String Phone)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Phone=@Phone";
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = Phone != null ? (object)Phone : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Fax

		/// <summary>
		/// Delete records by Fax
		/// </summary>
		/// <param name="Fax">Fax value</param>
		public int DeleteByFax(System.String Fax)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer] WHERE Fax=@Fax";
				command.Parameters.Add("@Fax", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Fax"].Value = Fax != null ? (object)Fax : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Customer]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(Customer item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Customer] SET ContactId = @ContactId, Name = @Name, Address = @Address, City = @City, PostalCode = @PostalCode, Country = @Country, Email = @Email, Phone = @Phone, Fax = @Fax WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@ContactId", System.Data.SqlDbType.Int);
				command.Parameters["@ContactId"].Value = item.ContactId != null ? (object)item.ContactId : System.DBNull.Value;
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = item.Name != null ? (object)item.Name : System.DBNull.Value;
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Address"].Value = item.Address != null ? (object)item.Address : System.DBNull.Value;
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters["@City"].Value = item.City != null ? (object)item.City : System.DBNull.Value;
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PostalCode"].Value = item.PostalCode != null ? (object)item.PostalCode : System.DBNull.Value;
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Country"].Value = item.Country != null ? (object)item.Country : System.DBNull.Value;
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Email"].Value = item.Email != null ? (object)item.Email : System.DBNull.Value;
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Phone"].Value = item.Phone != null ? (object)item.Phone : System.DBNull.Value;
				command.Parameters.Add("@Fax", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Fax"].Value = item.Fax != null ? (object)item.Fax : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<Customer> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Customer] SET ContactId = @ContactId, Name = @Name, Address = @Address, City = @City, PostalCode = @PostalCode, Country = @Country, Email = @Email, Phone = @Phone, Fax = @Fax WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters.Add("@ContactId", System.Data.SqlDbType.Int);
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Address", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@City", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@PostalCode", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Country", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Email", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Phone", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Fax", System.Data.SqlDbType.NVarChar);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@ContactId"].Value = item.ContactId != null ? (object)item.ContactId : System.DBNull.Value;
					command.Parameters["@Name"].Value = item.Name != null ? (object)item.Name : System.DBNull.Value;
					command.Parameters["@Address"].Value = item.Address != null ? (object)item.Address : System.DBNull.Value;
					command.Parameters["@City"].Value = item.City != null ? (object)item.City : System.DBNull.Value;
					command.Parameters["@PostalCode"].Value = item.PostalCode != null ? (object)item.PostalCode : System.DBNull.Value;
					command.Parameters["@Country"].Value = item.Country != null ? (object)item.Country : System.DBNull.Value;
					command.Parameters["@Email"].Value = item.Email != null ? (object)item.Email : System.DBNull.Value;
					command.Parameters["@Phone"].Value = item.Phone != null ? (object)item.Phone : System.DBNull.Value;
					command.Parameters["@Fax"].Value = item.Fax != null ? (object)item.Fax : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [Customer]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM Customer";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Represents the Product repository
	/// </summary>
	public partial interface IProductRepository : IRepository<Product>
	{
		/// <summary>
		/// Transaction instance created from <see cref="IDataRepository" />
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<Product> SelectById(System.Int32? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Product> SelectById(System.Int32? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by PartNumber
		/// </summary>
		/// <param name="PartNumber">PartNumber value</param>
		System.Collections.Generic.List<Product> SelectByPartNumber(System.String PartNumber);

		/// <summary>
		/// Retrieves the first set of items specified by count by PartNumber
		/// </summary>
		/// <param name="PartNumber">PartNumber value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Product> SelectByPartNumber(System.String PartNumber, int count);

		/// <summary>
		/// Retrieves a collection of items by Ean13
		/// </summary>
		/// <param name="Ean13">Ean13 value</param>
		System.Collections.Generic.List<Product> SelectByEan13(System.String Ean13);

		/// <summary>
		/// Retrieves the first set of items specified by count by Ean13
		/// </summary>
		/// <param name="Ean13">Ean13 value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Product> SelectByEan13(System.String Ean13, int count);

		/// <summary>
		/// Retrieves a collection of items by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		System.Collections.Generic.List<Product> SelectByName(System.String Name);

		/// <summary>
		/// Retrieves the first set of items specified by count by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Product> SelectByName(System.String Name, int count);

		/// <summary>
		/// Retrieves a collection of items by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		System.Collections.Generic.List<Product> SelectByDescription(System.String Description);

		/// <summary>
		/// Retrieves the first set of items specified by count by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Product> SelectByDescription(System.String Description, int count);

		/// <summary>
		/// Retrieves a collection of items by Rating
		/// </summary>
		/// <param name="Rating">Rating value</param>
		System.Collections.Generic.List<Product> SelectByRating(System.Decimal? Rating);

		/// <summary>
		/// Retrieves the first set of items specified by count by Rating
		/// </summary>
		/// <param name="Rating">Rating value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Product> SelectByRating(System.Decimal? Rating, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int32? Id);

		/// <summary>
		/// Delete records by PartNumber
		/// </summary>
		/// <param name="PartNumber">PartNumber value</param>
		int DeleteByPartNumber(System.String PartNumber);

		/// <summary>
		/// Delete records by Ean13
		/// </summary>
		/// <param name="Ean13">Ean13 value</param>
		int DeleteByEan13(System.String Ean13);

		/// <summary>
		/// Delete records by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		int DeleteByName(System.String Name);

		/// <summary>
		/// Delete records by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		int DeleteByDescription(System.String Description);

		/// <summary>
		/// Delete records by Rating
		/// </summary>
		/// <param name="Rating">Rating value</param>
		int DeleteByRating(System.Decimal? Rating);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.String PartNumber, System.String Ean13, System.String Name, System.String Description, System.Decimal? Rating);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int32? Id, System.String PartNumber, System.String Ean13, System.String Name, System.String Description, System.Decimal? Rating);
	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Default IProductRepository implementation 
	/// </summary>
	public partial class ProductRepository : IProductRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<Product> ToList()
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM Product";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Product[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Product> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Product", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Product[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<Product> SelectById(System.Int32? Id)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM Product WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Product WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE PartNumber=?

		/// <summary>
		/// Retrieves a collection of items by PartNumber
		/// </summary>
		/// <param name="PartNumber">PartNumber value</param>
		public System.Collections.Generic.List<Product> SelectByPartNumber(System.String PartNumber)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (PartNumber != null)
				{
					command.CommandText = "SELECT * FROM Product WHERE PartNumber=@PartNumber";
					command.Parameters.Add("@PartNumber", System.Data.SqlDbType.NVarChar);
					command.Parameters["@PartNumber"].Value = PartNumber != null ? (object)PartNumber : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Product WHERE PartNumber IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Ean13=?

		/// <summary>
		/// Retrieves a collection of items by Ean13
		/// </summary>
		/// <param name="Ean13">Ean13 value</param>
		public System.Collections.Generic.List<Product> SelectByEan13(System.String Ean13)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Ean13 != null)
				{
					command.CommandText = "SELECT * FROM Product WHERE Ean13=@Ean13";
					command.Parameters.Add("@Ean13", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Ean13"].Value = Ean13 != null ? (object)Ean13 : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Product WHERE Ean13 IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Name=?

		/// <summary>
		/// Retrieves a collection of items by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		public System.Collections.Generic.List<Product> SelectByName(System.String Name)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Name != null)
				{
					command.CommandText = "SELECT * FROM Product WHERE Name=@Name";
					command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Product WHERE Name IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Description=?

		/// <summary>
		/// Retrieves a collection of items by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		public System.Collections.Generic.List<Product> SelectByDescription(System.String Description)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Description != null)
				{
					command.CommandText = "SELECT * FROM Product WHERE Description=@Description";
					command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
					command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Product WHERE Description IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Rating=?

		/// <summary>
		/// Retrieves a collection of items by Rating
		/// </summary>
		/// <param name="Rating">Rating value</param>
		public System.Collections.Generic.List<Product> SelectByRating(System.Decimal? Rating)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Rating != null)
				{
					command.CommandText = "SELECT * FROM Product WHERE Rating=@Rating";
					command.Parameters.Add("@Rating", System.Data.SqlDbType.Decimal);
					command.Parameters["@Rating"].Value = Rating != null ? (object)Rating : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Product WHERE Rating IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Product> SelectById(System.Int32? Id, int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Id=@Id";					command.CommandText = "SELECT * FROM Product WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE PartNumber=?

		/// <summary>
		/// Retrieves the first set of items specified by count by PartNumber
		/// </summary>
		/// <param name="PartNumber">PartNumber value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Product> SelectByPartNumber(System.String PartNumber, int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (PartNumber != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE PartNumber=@PartNumber";					command.CommandText = "SELECT * FROM Product WHERE PartNumber=@PartNumber";
				command.Parameters.Add("@PartNumber", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PartNumber"].Value = PartNumber != null ? (object)PartNumber : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE PartNumber IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Ean13=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Ean13
		/// </summary>
		/// <param name="Ean13">Ean13 value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Product> SelectByEan13(System.String Ean13, int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Ean13 != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Ean13=@Ean13";					command.CommandText = "SELECT * FROM Product WHERE Ean13=@Ean13";
				command.Parameters.Add("@Ean13", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Ean13"].Value = Ean13 != null ? (object)Ean13 : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Ean13 IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Name=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Product> SelectByName(System.String Name, int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Name != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Name=@Name";					command.CommandText = "SELECT * FROM Product WHERE Name=@Name";
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Name IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Description=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Product> SelectByDescription(System.String Description, int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Description != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Description=@Description";					command.CommandText = "SELECT * FROM Product WHERE Description=@Description";
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Description IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Rating=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Rating
		/// </summary>
		/// <param name="Rating">Rating value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Product> SelectByRating(System.Decimal? Rating, int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Rating != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Rating=@Rating";					command.CommandText = "SELECT * FROM Product WHERE Rating=@Rating";
				command.Parameters.Add("@Rating", System.Data.SqlDbType.Decimal);
				command.Parameters["@Rating"].Value = Rating != null ? (object)Rating : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Rating IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.PartNumber = (reader.IsDBNull(1) ? null : reader["PartNumber"] as System.String);
						item.Ean13 = (reader.IsDBNull(2) ? null : reader["Ean13"] as System.String);
						item.Name = (reader.IsDBNull(3) ? null : reader["Name"] as System.String);
						item.Description = (reader.IsDBNull(4) ? null : reader["Description"] as System.String);
						item.Rating = (System.Decimal?) (reader.IsDBNull(5) ? null : reader["Rating"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [Product]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(Product item)
		{
			Create(item.PartNumber, item.Ean13, item.Name, item.Description, item.Rating);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="PartNumber">PartNumber value</param>
		/// <param name="Ean13">Ean13 value</param>
		/// <param name="Name">Name value</param>
		/// <param name="Description">Description value</param>
		/// <param name="Rating">Rating value</param>
		public void Create(System.String PartNumber, System.String Ean13, System.String Name, System.String Description, System.Decimal? Rating)
		{
			if (PartNumber != null && PartNumber.Length > 100)
				throw new System.ArgumentException("Max length for PartNumber is 100");
			if (Ean13 != null && Ean13.Length > 100)
				throw new System.ArgumentException("Max length for Ean13 is 100");
			if (Name != null && Name.Length > 100)
				throw new System.ArgumentException("Max length for Name is 100");
			if (Description != null && Description.Length > 100)
				throw new System.ArgumentException("Max length for Description is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Product] (PartNumber, Ean13, Name, Description, Rating)  VALUES (@PartNumber, @Ean13, @Name, @Description, @Rating)";

				command.Parameters.Add("@PartNumber", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PartNumber"].Value = PartNumber != null ? (object)PartNumber : System.DBNull.Value;
				command.Parameters.Add("@Ean13", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Ean13"].Value = Ean13 != null ? (object)Ean13 : System.DBNull.Value;
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;
				command.Parameters.Add("@Rating", System.Data.SqlDbType.Decimal);
				command.Parameters["@Rating"].Value = Rating != null ? (object)Rating : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [Product] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="PartNumber">PartNumber value</param>
		/// <param name="Ean13">Ean13 value</param>
		/// <param name="Name">Name value</param>
		/// <param name="Description">Description value</param>
		/// <param name="Rating">Rating value</param>
		public void Create(System.Int32? Id, System.String PartNumber, System.String Ean13, System.String Name, System.String Description, System.Decimal? Rating)
		{
			if (PartNumber != null && PartNumber.Length > Product.PartNumber_Max_Length)
				throw new System.ArgumentException("Max length for PartNumber is 100");
			if (Ean13 != null && Ean13.Length > Product.Ean13_Max_Length)
				throw new System.ArgumentException("Max length for Ean13 is 100");
			if (Name != null && Name.Length > Product.Name_Max_Length)
				throw new System.ArgumentException("Max length for Name is 100");
			if (Description != null && Description.Length > Product.Description_Max_Length)
				throw new System.ArgumentException("Max length for Description is 100");

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Product] (Id, PartNumber, Ean13, Name, Description, Rating)  VALUES (@Id, @PartNumber, @Ean13, @Name, @Description, @Rating)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@PartNumber", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PartNumber"].Value = PartNumber != null ? (object)PartNumber : System.DBNull.Value;
				command.Parameters.Add("@Ean13", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Ean13"].Value = Ean13 != null ? (object)Ean13 : System.DBNull.Value;
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;
				command.Parameters.Add("@Rating", System.Data.SqlDbType.Decimal);
				command.Parameters["@Rating"].Value = Rating != null ? (object)Rating : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<Product> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "Product";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.PartNumber);
						record.SetValue(2, item.Ean13);
						record.SetValue(3, item.Name);
						record.SetValue(4, item.Description);
						record.SetValue(5, item.Rating);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(Product item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<Product> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;

					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int32? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY PartNumber

		/// <summary>
		/// Delete records by PartNumber
		/// </summary>
		/// <param name="PartNumber">PartNumber value</param>
		public int DeleteByPartNumber(System.String PartNumber)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE PartNumber=@PartNumber";
				command.Parameters.Add("@PartNumber", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PartNumber"].Value = PartNumber != null ? (object)PartNumber : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Ean13

		/// <summary>
		/// Delete records by Ean13
		/// </summary>
		/// <param name="Ean13">Ean13 value</param>
		public int DeleteByEan13(System.String Ean13)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE Ean13=@Ean13";
				command.Parameters.Add("@Ean13", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Ean13"].Value = Ean13 != null ? (object)Ean13 : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Name

		/// <summary>
		/// Delete records by Name
		/// </summary>
		/// <param name="Name">Name value</param>
		public int DeleteByName(System.String Name)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE Name=@Name";
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = Name != null ? (object)Name : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Description

		/// <summary>
		/// Delete records by Description
		/// </summary>
		/// <param name="Description">Description value</param>
		public int DeleteByDescription(System.String Description)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE Description=@Description";
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = Description != null ? (object)Description : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Rating

		/// <summary>
		/// Delete records by Rating
		/// </summary>
		/// <param name="Rating">Rating value</param>
		public int DeleteByRating(System.Decimal? Rating)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product] WHERE Rating=@Rating";
				command.Parameters.Add("@Rating", System.Data.SqlDbType.Decimal);
				command.Parameters["@Rating"].Value = Rating != null ? (object)Rating : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Product]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(Product item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Product] SET PartNumber = @PartNumber, Ean13 = @Ean13, Name = @Name, Description = @Description, Rating = @Rating WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@PartNumber", System.Data.SqlDbType.NVarChar);
				command.Parameters["@PartNumber"].Value = item.PartNumber != null ? (object)item.PartNumber : System.DBNull.Value;
				command.Parameters.Add("@Ean13", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Ean13"].Value = item.Ean13 != null ? (object)item.Ean13 : System.DBNull.Value;
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Name"].Value = item.Name != null ? (object)item.Name : System.DBNull.Value;
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters["@Description"].Value = item.Description != null ? (object)item.Description : System.DBNull.Value;
				command.Parameters.Add("@Rating", System.Data.SqlDbType.Decimal);
				command.Parameters["@Rating"].Value = item.Rating != null ? (object)item.Rating : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<Product> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Product] SET PartNumber = @PartNumber, Ean13 = @Ean13, Name = @Name, Description = @Description, Rating = @Rating WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters.Add("@PartNumber", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Ean13", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Name", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Description", System.Data.SqlDbType.NVarChar);
				command.Parameters.Add("@Rating", System.Data.SqlDbType.Decimal);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@PartNumber"].Value = item.PartNumber != null ? (object)item.PartNumber : System.DBNull.Value;
					command.Parameters["@Ean13"].Value = item.Ean13 != null ? (object)item.Ean13 : System.DBNull.Value;
					command.Parameters["@Name"].Value = item.Name != null ? (object)item.Name : System.DBNull.Value;
					command.Parameters["@Description"].Value = item.Description != null ? (object)item.Description : System.DBNull.Value;
					command.Parameters["@Rating"].Value = item.Rating != null ? (object)item.Rating : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [Product]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM Product";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Represents the Stock repository
	/// </summary>
	public partial interface IStockRepository : IRepository<Stock>
	{
		/// <summary>
		/// Transaction instance created from <see cref="IDataRepository" />
		/// </summary>
		System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		System.Collections.Generic.List<Stock> SelectById(System.Int32? Id);

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Stock> SelectById(System.Int32? Id, int count);

		/// <summary>
		/// Retrieves a collection of items by ProductId
		/// </summary>
		/// <param name="ProductId">ProductId value</param>
		System.Collections.Generic.List<Stock> SelectByProductId(System.Int32? ProductId);

		/// <summary>
		/// Retrieves the first set of items specified by count by ProductId
		/// </summary>
		/// <param name="ProductId">ProductId value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Stock> SelectByProductId(System.Int32? ProductId, int count);

		/// <summary>
		/// Retrieves a collection of items by Quantity
		/// </summary>
		/// <param name="Quantity">Quantity value</param>
		System.Collections.Generic.List<Stock> SelectByQuantity(System.Int32? Quantity);

		/// <summary>
		/// Retrieves the first set of items specified by count by Quantity
		/// </summary>
		/// <param name="Quantity">Quantity value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Stock> SelectByQuantity(System.Int32? Quantity, int count);

		/// <summary>
		/// Retrieves a collection of items by LastUpdated
		/// </summary>
		/// <param name="LastUpdated">LastUpdated value</param>
		System.Collections.Generic.List<Stock> SelectByLastUpdated(System.DateTime? LastUpdated);

		/// <summary>
		/// Retrieves the first set of items specified by count by LastUpdated
		/// </summary>
		/// <param name="LastUpdated">LastUpdated value</param>
		/// <param name="count">the number of records to be retrieved</param>
		System.Collections.Generic.List<Stock> SelectByLastUpdated(System.DateTime? LastUpdated, int count);

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		int DeleteById(System.Int32? Id);

		/// <summary>
		/// Delete records by ProductId
		/// </summary>
		/// <param name="ProductId">ProductId value</param>
		int DeleteByProductId(System.Int32? ProductId);

		/// <summary>
		/// Delete records by Quantity
		/// </summary>
		/// <param name="Quantity">Quantity value</param>
		int DeleteByQuantity(System.Int32? Quantity);

		/// <summary>
		/// Delete records by LastUpdated
		/// </summary>
		/// <param name="LastUpdated">LastUpdated value</param>
		int DeleteByLastUpdated(System.DateTime? LastUpdated);

		/// <summary>
		/// Create new record without specifying a primary key
		/// </summary>
		void Create(System.Int32? ProductId, System.Int32? Quantity, System.DateTime? LastUpdated);

		/// <summary>
		/// Create new record specifying all fields
		/// </summary>
		void Create(System.Int32? Id, System.Int32? ProductId, System.Int32? Quantity, System.DateTime? LastUpdated);
	}
}

namespace SmartDeviceApp.TestDatabaseSingle
{
	/// <summary>
	/// Default IStockRepository implementation 
	/// </summary>
	public partial class StockRepository : IStockRepository
	{
		public System.Data.SqlServerCe.SqlCeTransaction Transaction { get; set; }

		#region SELECT *

		/// <summary>
		/// Retrieves all items as a generic collection
		/// </summary>
		public System.Collections.Generic.List<Stock> ToList()
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT * FROM Stock";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader.IsDBNull(2) ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Stock[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT TOP()

		/// <summary>
		/// Retrieves the first set of items specified by count as a generic collection
		/// </summary>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Stock> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Stock", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader.IsDBNull(2) ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Stock[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}

		#endregion

		#region SELECT .... WHERE Id=?

		/// <summary>
		/// Retrieves a collection of items by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public System.Collections.Generic.List<Stock> SelectById(System.Int32? Id)
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Id != null)
				{
					command.CommandText = "SELECT * FROM Stock WHERE Id=@Id";
					command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
					command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Stock WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader.IsDBNull(2) ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE ProductId=?

		/// <summary>
		/// Retrieves a collection of items by ProductId
		/// </summary>
		/// <param name="ProductId">ProductId value</param>
		public System.Collections.Generic.List<Stock> SelectByProductId(System.Int32? ProductId)
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (ProductId != null)
				{
					command.CommandText = "SELECT * FROM Stock WHERE ProductId=@ProductId";
					command.Parameters.Add("@ProductId", System.Data.SqlDbType.Int);
					command.Parameters["@ProductId"].Value = ProductId != null ? (object)ProductId : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Stock WHERE ProductId IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader.IsDBNull(2) ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE Quantity=?

		/// <summary>
		/// Retrieves a collection of items by Quantity
		/// </summary>
		/// <param name="Quantity">Quantity value</param>
		public System.Collections.Generic.List<Stock> SelectByQuantity(System.Int32? Quantity)
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (Quantity != null)
				{
					command.CommandText = "SELECT * FROM Stock WHERE Quantity=@Quantity";
					command.Parameters.Add("@Quantity", System.Data.SqlDbType.Int);
					command.Parameters["@Quantity"].Value = Quantity != null ? (object)Quantity : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Stock WHERE Quantity IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader.IsDBNull(2) ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT .... WHERE LastUpdated=?

		/// <summary>
		/// Retrieves a collection of items by LastUpdated
		/// </summary>
		/// <param name="LastUpdated">LastUpdated value</param>
		public System.Collections.Generic.List<Stock> SelectByLastUpdated(System.DateTime? LastUpdated)
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				if (LastUpdated != null)
				{
					command.CommandText = "SELECT * FROM Stock WHERE LastUpdated=@LastUpdated";
					command.Parameters.Add("@LastUpdated", System.Data.SqlDbType.DateTime);
					command.Parameters["@LastUpdated"].Value = LastUpdated != null ? (object)LastUpdated : System.DBNull.Value;
				}
				else
					command.CommandText = "SELECT * FROM Stock WHERE LastUpdated IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader.IsDBNull(2) ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Stock> SelectById(System.Int32? Id, int count)
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Id != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Stock WHERE Id=@Id";					command.CommandText = "SELECT * FROM Stock WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Stock WHERE Id IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader.IsDBNull(2) ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE ProductId=?

		/// <summary>
		/// Retrieves the first set of items specified by count by ProductId
		/// </summary>
		/// <param name="ProductId">ProductId value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Stock> SelectByProductId(System.Int32? ProductId, int count)
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (ProductId != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Stock WHERE ProductId=@ProductId";					command.CommandText = "SELECT * FROM Stock WHERE ProductId=@ProductId";
				command.Parameters.Add("@ProductId", System.Data.SqlDbType.Int);
				command.Parameters["@ProductId"].Value = ProductId != null ? (object)ProductId : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Stock WHERE ProductId IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader.IsDBNull(2) ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE Quantity=?

		/// <summary>
		/// Retrieves the first set of items specified by count by Quantity
		/// </summary>
		/// <param name="Quantity">Quantity value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Stock> SelectByQuantity(System.Int32? Quantity, int count)
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (Quantity != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Stock WHERE Quantity=@Quantity";					command.CommandText = "SELECT * FROM Stock WHERE Quantity=@Quantity";
				command.Parameters.Add("@Quantity", System.Data.SqlDbType.Int);
				command.Parameters["@Quantity"].Value = Quantity != null ? (object)Quantity : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Stock WHERE Quantity IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader.IsDBNull(2) ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region SELECT TOP(?).... WHERE LastUpdated=?

		/// <summary>
		/// Retrieves the first set of items specified by count by LastUpdated
		/// </summary>
		/// <param name="LastUpdated">LastUpdated value</param>
		/// <param name="count">Number of records to be retrieved</param>
		public System.Collections.Generic.List<Stock> SelectByLastUpdated(System.DateTime? LastUpdated, int count)
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand(Transaction))
			{
			if (LastUpdated != null)
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Stock WHERE LastUpdated=@LastUpdated";					command.CommandText = "SELECT * FROM Stock WHERE LastUpdated=@LastUpdated";
				command.Parameters.Add("@LastUpdated", System.Data.SqlDbType.DateTime);
				command.Parameters["@LastUpdated"].Value = LastUpdated != null ? (object)LastUpdated : System.DBNull.Value;
			}
			else
				command.CommandText = "SELECT TOP(" + count + ") * FROM Stock WHERE LastUpdated IS NULL";

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader.IsDBNull(0) ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader.IsDBNull(1) ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader.IsDBNull(2) ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader.IsDBNull(3) ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		#endregion

		#region INSERT [Stock]

		/// <summary>
		/// Inserts the item to the table
		/// </summary>
		/// <param name="item">Item to insert to the database</param>
		public void Create(Stock item)
		{
			Create(item.ProductId, item.Quantity, item.LastUpdated);
		}

		#endregion

		#region INSERT Ignoring Primary Key

		/// <summary>
		/// Inserts a new record to the table without specifying the primary key
		/// </summary>
		/// <param name="ProductId">ProductId value</param>
		/// <param name="Quantity">Quantity value</param>
		/// <param name="LastUpdated">LastUpdated value</param>
		public void Create(System.Int32? ProductId, System.Int32? Quantity, System.DateTime? LastUpdated)
		{

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Stock] (ProductId, Quantity, LastUpdated)  VALUES (@ProductId, @Quantity, @LastUpdated)";

				command.Parameters.Add("@ProductId", System.Data.SqlDbType.Int);
				command.Parameters["@ProductId"].Value = ProductId != null ? (object)ProductId : System.DBNull.Value;
				command.Parameters.Add("@Quantity", System.Data.SqlDbType.Int);
				command.Parameters["@Quantity"].Value = Quantity != null ? (object)Quantity : System.DBNull.Value;
				command.Parameters.Add("@LastUpdated", System.Data.SqlDbType.DateTime);
				command.Parameters["@LastUpdated"].Value = LastUpdated != null ? (object)LastUpdated : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT [Stock] by fields

		/// <summary>
		/// Inserts a new record to the table specifying all fields
		/// </summary>
		/// <param name="Id">Id value</param>
		/// <param name="ProductId">ProductId value</param>
		/// <param name="Quantity">Quantity value</param>
		/// <param name="LastUpdated">LastUpdated value</param>
		public void Create(System.Int32? Id, System.Int32? ProductId, System.Int32? Quantity, System.DateTime? LastUpdated)
		{

			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "INSERT INTO [Stock] (Id, ProductId, Quantity, LastUpdated)  VALUES (@Id, @ProductId, @Quantity, @LastUpdated)";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;
				command.Parameters.Add("@ProductId", System.Data.SqlDbType.Int);
				command.Parameters["@ProductId"].Value = ProductId != null ? (object)ProductId : System.DBNull.Value;
				command.Parameters.Add("@Quantity", System.Data.SqlDbType.Int);
				command.Parameters["@Quantity"].Value = Quantity != null ? (object)Quantity : System.DBNull.Value;
				command.Parameters.Add("@LastUpdated", System.Data.SqlDbType.DateTime);
				command.Parameters["@LastUpdated"].Value = LastUpdated != null ? (object)LastUpdated : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region INSERT MANY

		/// <summary>
		/// Populates the table with a collection of items
		/// </summary>
		public void Create(System.Collections.Generic.IEnumerable<Stock> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandType = System.Data.CommandType.TableDirect;
				command.CommandText = "Stock";

				using (var resultSet = command.ExecuteResultSet(System.Data.SqlServerCe.ResultSetOptions.Updatable))
				{
					var record = resultSet.CreateRecord();
					foreach (var item in items)
					{
						record.SetValue(1, item.ProductId);
						record.SetValue(2, item.Quantity);
						record.SetValue(3, item.LastUpdated);
						resultSet.Insert(record);
					}
				}
			}
		}

		#endregion

		#region DELETE

		/// <summary>
		/// Deletes the item
		/// </summary>
		/// <param name="item">Item to delete</param>
		public void Delete(Stock item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Stock] WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE MANY

		/// <summary>
		/// Deletes a collection of item
		/// </summary>
		/// <param name="items">Items to delete</param>
		public void Delete(System.Collections.Generic.IEnumerable<Stock> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Stock] WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;

					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region DELETE BY Id

		/// <summary>
		/// Delete records by Id
		/// </summary>
		/// <param name="Id">Id value</param>
		public int DeleteById(System.Int32? Id)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Stock] WHERE Id=@Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = Id != null ? (object)Id : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY ProductId

		/// <summary>
		/// Delete records by ProductId
		/// </summary>
		/// <param name="ProductId">ProductId value</param>
		public int DeleteByProductId(System.Int32? ProductId)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Stock] WHERE ProductId=@ProductId";
				command.Parameters.Add("@ProductId", System.Data.SqlDbType.Int);
				command.Parameters["@ProductId"].Value = ProductId != null ? (object)ProductId : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY Quantity

		/// <summary>
		/// Delete records by Quantity
		/// </summary>
		/// <param name="Quantity">Quantity value</param>
		public int DeleteByQuantity(System.Int32? Quantity)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Stock] WHERE Quantity=@Quantity";
				command.Parameters.Add("@Quantity", System.Data.SqlDbType.Int);
				command.Parameters["@Quantity"].Value = Quantity != null ? (object)Quantity : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region DELETE BY LastUpdated

		/// <summary>
		/// Delete records by LastUpdated
		/// </summary>
		/// <param name="LastUpdated">LastUpdated value</param>
		public int DeleteByLastUpdated(System.DateTime? LastUpdated)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Stock] WHERE LastUpdated=@LastUpdated";
				command.Parameters.Add("@LastUpdated", System.Data.SqlDbType.DateTime);
				command.Parameters["@LastUpdated"].Value = LastUpdated != null ? (object)LastUpdated : System.DBNull.Value;

				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region Purge

		/// <summary>
		/// Purges the contents of the table
		/// </summary>
		public int Purge()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "DELETE FROM [Stock]";
				return command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE

		/// <summary>
		/// Updates the item
		/// </summary>
		/// <param name="item">Item to update</param>
		public void Update(Stock item)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Stock] SET ProductId = @ProductId, Quantity = @Quantity, LastUpdated = @LastUpdated WHERE Id = @Id";

				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
				command.Parameters.Add("@ProductId", System.Data.SqlDbType.Int);
				command.Parameters["@ProductId"].Value = item.ProductId != null ? (object)item.ProductId : System.DBNull.Value;
				command.Parameters.Add("@Quantity", System.Data.SqlDbType.Int);
				command.Parameters["@Quantity"].Value = item.Quantity != null ? (object)item.Quantity : System.DBNull.Value;
				command.Parameters.Add("@LastUpdated", System.Data.SqlDbType.DateTime);
				command.Parameters["@LastUpdated"].Value = item.LastUpdated != null ? (object)item.LastUpdated : System.DBNull.Value;
				command.ExecuteNonQuery();
			}
		}

		#endregion

		#region UPDATE MANY

		/// <summary>
		/// Updates a collection of items
		/// </summary>
		/// <param name="items">Items to update</param>
		public void Update(System.Collections.Generic.IEnumerable<Stock> items)
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "UPDATE [Stock] SET ProductId = @ProductId, Quantity = @Quantity, LastUpdated = @LastUpdated WHERE Id = @Id";
				command.Parameters.Add("@Id", System.Data.SqlDbType.Int);
				command.Parameters.Add("@ProductId", System.Data.SqlDbType.Int);
				command.Parameters.Add("@Quantity", System.Data.SqlDbType.Int);
				command.Parameters.Add("@LastUpdated", System.Data.SqlDbType.DateTime);
				command.Prepare();

				foreach (var item in items)
				{
					command.Parameters["@Id"].Value = item.Id != null ? (object)item.Id : System.DBNull.Value;
					command.Parameters["@ProductId"].Value = item.ProductId != null ? (object)item.ProductId : System.DBNull.Value;
					command.Parameters["@Quantity"].Value = item.Quantity != null ? (object)item.Quantity : System.DBNull.Value;
					command.Parameters["@LastUpdated"].Value = item.LastUpdated != null ? (object)item.LastUpdated : System.DBNull.Value;
					command.ExecuteNonQuery();
				}
			}
		}

		#endregion

		#region COUNT [Stock]

		/// <summary>
		/// Gets the number of records in the table
		/// </summary>
		public int Count()
		{
			using (var command = EntityBase.CreateCommand(Transaction))
			{
				command.CommandText = "SELECT COUNT(*) FROM Stock";
				return (int)command.ExecuteScalar();
			}
		}

		#endregion

	}
}
