
/*
	The code below was generated by the SQL CE Code Generator  (http://sqlcecodegen.codeplex.com)

	SQL CE Code Generator was written by Christian Resma Helle
*/


namespace ChristianHelle.DatabaseTools.SqlCe.CodeGenConsole.TestDatabase.sdf
{
	#region EntityBase
	public static class EntityBase
	{
		public static System.String ConnectionString { get; set; }

		private static System.Data.SqlServerCe.SqlCeConnection connectionInstance = null;
		public static System.Data.SqlServerCe.SqlCeConnection Connection
		{
			get
			{
				if (connectionInstance == null)
					connectionInstance = new System.Data.SqlServerCe.SqlCeConnection(ConnectionString);
				if (connectionInstance.State != System.Data.ConnectionState.Open)
					connectionInstance.Open();
				return connectionInstance;
			}
		}

		public static System.Data.SqlServerCe.SqlCeCommand CreateCommand()
		{
			return Connection.CreateCommand();
		}
	}
	#endregion

	#region Contact
	public partial class Contact
	{
		private System.Int32? _Id;
		public System.Int32? Id
		{
			 get { return _Id; }
			 set
			{
				_Id = value;
			}
		}
		private System.String _Name;
		public const int Name_MAX_LENGTH = 100;
		public System.String Name
		{
			 get { return _Name; }
			 set
			{
				_Name = value;
				if (_Name.Length > Name_MAX_LENGTH)
					throw new System.ArgumentException("Max length for Name is 100");
			}
		}
		private System.String _Address;
		public const int Address_MAX_LENGTH = 100;
		public System.String Address
		{
			 get { return _Address; }
			 set
			{
				_Address = value;
				if (_Address.Length > Address_MAX_LENGTH)
					throw new System.ArgumentException("Max length for Address is 100");
			}
		}
		private System.String _City;
		public const int City_MAX_LENGTH = 100;
		public System.String City
		{
			 get { return _City; }
			 set
			{
				_City = value;
				if (_City.Length > City_MAX_LENGTH)
					throw new System.ArgumentException("Max length for City is 100");
			}
		}
		private System.String _PostalCode;
		public const int PostalCode_MAX_LENGTH = 100;
		public System.String PostalCode
		{
			 get { return _PostalCode; }
			 set
			{
				_PostalCode = value;
				if (_PostalCode.Length > PostalCode_MAX_LENGTH)
					throw new System.ArgumentException("Max length for PostalCode is 100");
			}
		}
		private System.String _Country;
		public const int Country_MAX_LENGTH = 100;
		public System.String Country
		{
			 get { return _Country; }
			 set
			{
				_Country = value;
				if (_Country.Length > Country_MAX_LENGTH)
					throw new System.ArgumentException("Max length for Country is 100");
			}
		}
		private System.String _Email;
		public const int Email_MAX_LENGTH = 100;
		public System.String Email
		{
			 get { return _Email; }
			 set
			{
				_Email = value;
				if (_Email.Length > Email_MAX_LENGTH)
					throw new System.ArgumentException("Max length for Email is 100");
			}
		}
		private System.String _Phone;
		public const int Phone_MAX_LENGTH = 100;
		public System.String Phone
		{
			 get { return _Phone; }
			 set
			{
				_Phone = value;
				if (_Phone.Length > Phone_MAX_LENGTH)
					throw new System.ArgumentException("Max length for Phone is 100");
			}
		}
	}
	#endregion

	#region Customer
	public partial class Customer
	{
		private System.Int32? _Id;
		public System.Int32? Id
		{
			 get { return _Id; }
			 set
			{
				_Id = value;
			}
		}
		private System.Int32? _ContactId;
		public System.Int32? ContactId
		{
			 get { return _ContactId; }
			 set
			{
				_ContactId = value;
			}
		}
		private System.String _Name;
		public const int Name_MAX_LENGTH = 100;
		public System.String Name
		{
			 get { return _Name; }
			 set
			{
				_Name = value;
				if (_Name.Length > Name_MAX_LENGTH)
					throw new System.ArgumentException("Max length for Name is 100");
			}
		}
		private System.String _Address;
		public const int Address_MAX_LENGTH = 100;
		public System.String Address
		{
			 get { return _Address; }
			 set
			{
				_Address = value;
				if (_Address.Length > Address_MAX_LENGTH)
					throw new System.ArgumentException("Max length for Address is 100");
			}
		}
		private System.String _City;
		public const int City_MAX_LENGTH = 100;
		public System.String City
		{
			 get { return _City; }
			 set
			{
				_City = value;
				if (_City.Length > City_MAX_LENGTH)
					throw new System.ArgumentException("Max length for City is 100");
			}
		}
		private System.String _PostalCode;
		public const int PostalCode_MAX_LENGTH = 100;
		public System.String PostalCode
		{
			 get { return _PostalCode; }
			 set
			{
				_PostalCode = value;
				if (_PostalCode.Length > PostalCode_MAX_LENGTH)
					throw new System.ArgumentException("Max length for PostalCode is 100");
			}
		}
		private System.String _Country;
		public const int Country_MAX_LENGTH = 100;
		public System.String Country
		{
			 get { return _Country; }
			 set
			{
				_Country = value;
				if (_Country.Length > Country_MAX_LENGTH)
					throw new System.ArgumentException("Max length for Country is 100");
			}
		}
		private System.String _Email;
		public const int Email_MAX_LENGTH = 100;
		public System.String Email
		{
			 get { return _Email; }
			 set
			{
				_Email = value;
				if (_Email.Length > Email_MAX_LENGTH)
					throw new System.ArgumentException("Max length for Email is 100");
			}
		}
		private System.String _Phone;
		public const int Phone_MAX_LENGTH = 100;
		public System.String Phone
		{
			 get { return _Phone; }
			 set
			{
				_Phone = value;
				if (_Phone.Length > Phone_MAX_LENGTH)
					throw new System.ArgumentException("Max length for Phone is 100");
			}
		}
		private System.String _Fax;
		public const int Fax_MAX_LENGTH = 100;
		public System.String Fax
		{
			 get { return _Fax; }
			 set
			{
				_Fax = value;
				if (_Fax.Length > Fax_MAX_LENGTH)
					throw new System.ArgumentException("Max length for Fax is 100");
			}
		}
	}
	#endregion

	#region Product
	public partial class Product
	{
		private System.Int32? _Id;
		public System.Int32? Id
		{
			 get { return _Id; }
			 set
			{
				_Id = value;
			}
		}
		private System.String _PartNumber;
		public const int PartNumber_MAX_LENGTH = 100;
		public System.String PartNumber
		{
			 get { return _PartNumber; }
			 set
			{
				_PartNumber = value;
				if (_PartNumber.Length > PartNumber_MAX_LENGTH)
					throw new System.ArgumentException("Max length for PartNumber is 100");
			}
		}
		private System.String _Ean13;
		public const int Ean13_MAX_LENGTH = 100;
		public System.String Ean13
		{
			 get { return _Ean13; }
			 set
			{
				_Ean13 = value;
				if (_Ean13.Length > Ean13_MAX_LENGTH)
					throw new System.ArgumentException("Max length for Ean13 is 100");
			}
		}
		private System.String _Name;
		public const int Name_MAX_LENGTH = 100;
		public System.String Name
		{
			 get { return _Name; }
			 set
			{
				_Name = value;
				if (_Name.Length > Name_MAX_LENGTH)
					throw new System.ArgumentException("Max length for Name is 100");
			}
		}
		private System.String _Description;
		public const int Description_MAX_LENGTH = 100;
		public System.String Description
		{
			 get { return _Description; }
			 set
			{
				_Description = value;
				if (_Description.Length > Description_MAX_LENGTH)
					throw new System.ArgumentException("Max length for Description is 100");
			}
		}
	}
	#endregion

	#region Stock
	public partial class Stock
	{
		private System.Int32? _Id;
		public System.Int32? Id
		{
			 get { return _Id; }
			 set
			{
				_Id = value;
			}
		}
		private System.Int32? _ProductId;
		public System.Int32? ProductId
		{
			 get { return _ProductId; }
			 set
			{
				_ProductId = value;
			}
		}
		private System.Int32? _Quantity;
		public System.Int32? Quantity
		{
			 get { return _Quantity; }
			 set
			{
				_Quantity = value;
			}
		}
		private System.DateTime? _LastUpdated;
		public System.DateTime? LastUpdated
		{
			 get { return _LastUpdated; }
			 set
			{
				_LastUpdated = value;
			}
		}
	}
	#endregion

}

namespace ChristianHelle.DatabaseTools.SqlCe.CodeGenConsole.TestDatabase.sdf
{
	#region Repository Interface
	public interface IRepository<T>
	{
		System.Collections.Generic.List<T> ToList();
		System.Collections.Generic.List<T> ToList(int count);
		T[] ToArray();
		T[] ToArray(int count);
		void Create(T item);
		void Create(System.Collections.Generic.IEnumerable<T> items);
		void Update(T item);
		void Delete(T item);
		void Purge();
	}
	#endregion

	#region Contact Repository
	public interface IContactRepository : IRepository<Contact>
	{
		System.Collections.Generic.List<Contact> SelectById(System.Int32 Id);
		System.Collections.Generic.List<Contact> SelectById(System.Int32 Id, int count);
		System.Collections.Generic.List<Contact> SelectByName(System.String Name);
		System.Collections.Generic.List<Contact> SelectByName(System.String Name, int count);
		System.Collections.Generic.List<Contact> SelectByAddress(System.String Address);
		System.Collections.Generic.List<Contact> SelectByAddress(System.String Address, int count);
		System.Collections.Generic.List<Contact> SelectByCity(System.String City);
		System.Collections.Generic.List<Contact> SelectByCity(System.String City, int count);
		System.Collections.Generic.List<Contact> SelectByPostalCode(System.String PostalCode);
		System.Collections.Generic.List<Contact> SelectByPostalCode(System.String PostalCode, int count);
		System.Collections.Generic.List<Contact> SelectByCountry(System.String Country);
		System.Collections.Generic.List<Contact> SelectByCountry(System.String Country, int count);
		System.Collections.Generic.List<Contact> SelectByEmail(System.String Email);
		System.Collections.Generic.List<Contact> SelectByEmail(System.String Email, int count);
		System.Collections.Generic.List<Contact> SelectByPhone(System.String Phone);
		System.Collections.Generic.List<Contact> SelectByPhone(System.String Phone, int count);
	}

	public partial class ContactRepository : IContactRepository
	{
		#region SELECT *
		public System.Collections.Generic.List<Contact> ToList()
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Contact";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Contact[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}
		#endregion

		#region SELECT TOP()
		public System.Collections.Generic.List<Contact> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Contact", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Contact[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}
		#endregion

		#region SELECT .... WHERE Id=?

		public System.Collections.Generic.List<Contact> SelectById(System.Int32 Id)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Contact WHERE Id=@Id";
				command.Parameters.AddWithValue("@Id", Id);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Name=?

		public System.Collections.Generic.List<Contact> SelectByName(System.String Name)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Contact WHERE Name=@Name";
				command.Parameters.AddWithValue("@Name", Name);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Address=?

		public System.Collections.Generic.List<Contact> SelectByAddress(System.String Address)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Contact WHERE Address=@Address";
				command.Parameters.AddWithValue("@Address", Address);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE City=?

		public System.Collections.Generic.List<Contact> SelectByCity(System.String City)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Contact WHERE City=@City";
				command.Parameters.AddWithValue("@City", City);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE PostalCode=?

		public System.Collections.Generic.List<Contact> SelectByPostalCode(System.String PostalCode)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Contact WHERE PostalCode=@PostalCode";
				command.Parameters.AddWithValue("@PostalCode", PostalCode);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Country=?

		public System.Collections.Generic.List<Contact> SelectByCountry(System.String Country)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Contact WHERE Country=@Country";
				command.Parameters.AddWithValue("@Country", Country);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Email=?

		public System.Collections.Generic.List<Contact> SelectByEmail(System.String Email)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Contact WHERE Email=@Email";
				command.Parameters.AddWithValue("@Email", Email);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Phone=?

		public System.Collections.Generic.List<Contact> SelectByPhone(System.String Phone)
		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Contact WHERE Phone=@Phone";
				command.Parameters.AddWithValue("@Phone", Phone);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		public System.Collections.Generic.List<Contact> SelectById(System.Int32 Id, int count)		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Id=@Id";
				command.Parameters.AddWithValue("@Id", Id);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Name=?

		public System.Collections.Generic.List<Contact> SelectByName(System.String Name, int count)		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Name=@Name";
				command.Parameters.AddWithValue("@Name", Name);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Address=?

		public System.Collections.Generic.List<Contact> SelectByAddress(System.String Address, int count)		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Address=@Address";
				command.Parameters.AddWithValue("@Address", Address);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE City=?

		public System.Collections.Generic.List<Contact> SelectByCity(System.String City, int count)		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE City=@City";
				command.Parameters.AddWithValue("@City", City);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE PostalCode=?

		public System.Collections.Generic.List<Contact> SelectByPostalCode(System.String PostalCode, int count)		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE PostalCode=@PostalCode";
				command.Parameters.AddWithValue("@PostalCode", PostalCode);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Country=?

		public System.Collections.Generic.List<Contact> SelectByCountry(System.String Country, int count)		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Country=@Country";
				command.Parameters.AddWithValue("@Country", Country);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Email=?

		public System.Collections.Generic.List<Contact> SelectByEmail(System.String Email, int count)		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Email=@Email";
				command.Parameters.AddWithValue("@Email", Email);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Phone=?

		public System.Collections.Generic.List<Contact> SelectByPhone(System.String Phone, int count)		{
			var list = new System.Collections.Generic.List<Contact>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Contact WHERE Phone=@Phone";
				command.Parameters.AddWithValue("@Phone", Phone);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Contact();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region INSERT Contact
		public void Create(Contact item)
		{
			Create(
item.Id, item.Name, item.Address, item.City, item.PostalCode, item.Country, item.Email, item.Phone);
		}
		#endregion

		#region INSERT Ignoring Primary Key
		public void Create(
System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone)
		{
			if (Name.Length > 100)
				throw new System.ArgumentException("Max length for Name is 100");
			if (Address.Length > 100)
				throw new System.ArgumentException("Max length for Address is 100");
			if (City.Length > 100)
				throw new System.ArgumentException("Max length for City is 100");
			if (PostalCode.Length > 100)
				throw new System.ArgumentException("Max length for PostalCode is 100");
			if (Country.Length > 100)
				throw new System.ArgumentException("Max length for Country is 100");
			if (Email.Length > 100)
				throw new System.ArgumentException("Max length for Email is 100");
			if (Phone.Length > 100)
				throw new System.ArgumentException("Max length for Phone is 100");

			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "INSERT INTO Contact (Name, Address, City, PostalCode, Country, Email, Phone)  VALUES (@Name, @Address, @City, @PostalCode, @Country, @Email, @Phone)";
				command.Parameters.AddWithValue("@Name", Name != null ? (object)Name : System.DBNull.Value);
				command.Parameters.AddWithValue("@Address", Address != null ? (object)Address : System.DBNull.Value);
				command.Parameters.AddWithValue("@City", City != null ? (object)City : System.DBNull.Value);
				command.Parameters.AddWithValue("@PostalCode", PostalCode != null ? (object)PostalCode : System.DBNull.Value);
				command.Parameters.AddWithValue("@Country", Country != null ? (object)Country : System.DBNull.Value);
				command.Parameters.AddWithValue("@Email", Email != null ? (object)Email : System.DBNull.Value);
				command.Parameters.AddWithValue("@Phone", Phone != null ? (object)Phone : System.DBNull.Value);
				command.ExecuteNonQuery();
			}
		}
		#endregion

		#region INSERT Contact by fields
		public Contact Create(
System.Int32? Id, System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone)
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "INSERT INTO Contact (Id, Name, Address, City, PostalCode, Country, Email, Phone)  VALUES (@Id, @Name, @Address, @City, @PostalCode, @Country, @Email, @Phone)";
				command.Parameters.AddWithValue("@Id", Id != null ? (object)Id : System.DBNull.Value);
				command.Parameters.AddWithValue("@Name", Name != null ? (object)Name : System.DBNull.Value);
				command.Parameters.AddWithValue("@Address", Address != null ? (object)Address : System.DBNull.Value);
				command.Parameters.AddWithValue("@City", City != null ? (object)City : System.DBNull.Value);
				command.Parameters.AddWithValue("@PostalCode", PostalCode != null ? (object)PostalCode : System.DBNull.Value);
				command.Parameters.AddWithValue("@Country", Country != null ? (object)Country : System.DBNull.Value);
				command.Parameters.AddWithValue("@Email", Email != null ? (object)Email : System.DBNull.Value);
				command.Parameters.AddWithValue("@Phone", Phone != null ? (object)Phone : System.DBNull.Value);
				command.ExecuteNonQuery();

				var item = new Contact();
				item.Id = Id;
				item.Name = Name;
				item.Address = Address;
				item.City = City;
				item.PostalCode = PostalCode;
				item.Country = Country;
				item.Email = Email;
				item.Phone = Phone;
				return item;
			}
		}
		#endregion

		#region INSERT MANY
		public void Create(System.Collections.Generic.IEnumerable<Contact> items)
		{
			foreach (var item in items)
				Create(
item.Id, item.Name, item.Address, item.City, item.PostalCode, item.Country, item.Email, item.Phone);
		}
		#endregion

		#region DELETE
		public void Delete(Contact item)
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "DELETE FROM Contact WHERE Id = @Id AND Name = @Name AND Address = @Address AND City = @City AND PostalCode = @PostalCode AND Country = @Country AND Email = @Email AND Phone = @Phone";
				command.Parameters.AddWithValue("@Id", item.Id != null ? (object)item.Id : System.DBNull.Value);
				command.Parameters.AddWithValue("@Name", item.Name != null ? (object)item.Name : System.DBNull.Value);
				command.Parameters.AddWithValue("@Address", item.Address != null ? (object)item.Address : System.DBNull.Value);
				command.Parameters.AddWithValue("@City", item.City != null ? (object)item.City : System.DBNull.Value);
				command.Parameters.AddWithValue("@PostalCode", item.PostalCode != null ? (object)item.PostalCode : System.DBNull.Value);
				command.Parameters.AddWithValue("@Country", item.Country != null ? (object)item.Country : System.DBNull.Value);
				command.Parameters.AddWithValue("@Email", item.Email != null ? (object)item.Email : System.DBNull.Value);
				command.Parameters.AddWithValue("@Phone", item.Phone != null ? (object)item.Phone : System.DBNull.Value);
				command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Id

		public int DeleteById(System.Int32? Id)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Contact WHERE Id=@Id";
				command.Parameters.AddWithValue("@Id", Id != null ? (object)Id : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Name

		public int DeleteByName(System.String Name)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Contact WHERE Name=@Name";
				command.Parameters.AddWithValue("@Name", Name != null ? (object)Name : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Address

		public int DeleteByAddress(System.String Address)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Contact WHERE Address=@Address";
				command.Parameters.AddWithValue("@Address", Address != null ? (object)Address : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY City

		public int DeleteByCity(System.String City)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Contact WHERE City=@City";
				command.Parameters.AddWithValue("@City", City != null ? (object)City : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY PostalCode

		public int DeleteByPostalCode(System.String PostalCode)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Contact WHERE PostalCode=@PostalCode";
				command.Parameters.AddWithValue("@PostalCode", PostalCode != null ? (object)PostalCode : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Country

		public int DeleteByCountry(System.String Country)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Contact WHERE Country=@Country";
				command.Parameters.AddWithValue("@Country", Country != null ? (object)Country : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Email

		public int DeleteByEmail(System.String Email)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Contact WHERE Email=@Email";
				command.Parameters.AddWithValue("@Email", Email != null ? (object)Email : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Phone

		public int DeleteByPhone(System.String Phone)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Contact WHERE Phone=@Phone";
				command.Parameters.AddWithValue("@Phone", Phone != null ? (object)Phone : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region Purge
		public void Purge()
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "DELETE FROM Contact";
				command.ExecuteNonQuery();
			}

		}
		#endregion

		#region UPDATE
		public void Update(Contact item)
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "UPDATE Contact SET Name = @Name, Address = @Address, City = @City, PostalCode = @PostalCode, Country = @Country, Email = @Email, Phone = @Phone WHERE Id = @Id";
				command.Parameters.AddWithValue("@Id", item.Id != null ? (object)item.Id : System.DBNull.Value);
				command.Parameters.AddWithValue("@Name", item.Name != null ? (object)item.Name : System.DBNull.Value);
				command.Parameters.AddWithValue("@Address", item.Address != null ? (object)item.Address : System.DBNull.Value);
				command.Parameters.AddWithValue("@City", item.City != null ? (object)item.City : System.DBNull.Value);
				command.Parameters.AddWithValue("@PostalCode", item.PostalCode != null ? (object)item.PostalCode : System.DBNull.Value);
				command.Parameters.AddWithValue("@Country", item.Country != null ? (object)item.Country : System.DBNull.Value);
				command.Parameters.AddWithValue("@Email", item.Email != null ? (object)item.Email : System.DBNull.Value);
				command.Parameters.AddWithValue("@Phone", item.Phone != null ? (object)item.Phone : System.DBNull.Value);
				command.ExecuteNonQuery();
			}
		}
		#endregion

	}
	#endregion

	#region Customer Repository
	public interface ICustomerRepository : IRepository<Customer>
	{
		System.Collections.Generic.List<Customer> SelectById(System.Int32 Id);
		System.Collections.Generic.List<Customer> SelectById(System.Int32 Id, int count);
		System.Collections.Generic.List<Customer> SelectByContactId(System.Int32 ContactId);
		System.Collections.Generic.List<Customer> SelectByContactId(System.Int32 ContactId, int count);
		System.Collections.Generic.List<Customer> SelectByName(System.String Name);
		System.Collections.Generic.List<Customer> SelectByName(System.String Name, int count);
		System.Collections.Generic.List<Customer> SelectByAddress(System.String Address);
		System.Collections.Generic.List<Customer> SelectByAddress(System.String Address, int count);
		System.Collections.Generic.List<Customer> SelectByCity(System.String City);
		System.Collections.Generic.List<Customer> SelectByCity(System.String City, int count);
		System.Collections.Generic.List<Customer> SelectByPostalCode(System.String PostalCode);
		System.Collections.Generic.List<Customer> SelectByPostalCode(System.String PostalCode, int count);
		System.Collections.Generic.List<Customer> SelectByCountry(System.String Country);
		System.Collections.Generic.List<Customer> SelectByCountry(System.String Country, int count);
		System.Collections.Generic.List<Customer> SelectByEmail(System.String Email);
		System.Collections.Generic.List<Customer> SelectByEmail(System.String Email, int count);
		System.Collections.Generic.List<Customer> SelectByPhone(System.String Phone);
		System.Collections.Generic.List<Customer> SelectByPhone(System.String Phone, int count);
		System.Collections.Generic.List<Customer> SelectByFax(System.String Fax);
		System.Collections.Generic.List<Customer> SelectByFax(System.String Fax, int count);
	}

	public partial class CustomerRepository : ICustomerRepository
	{
		#region SELECT *
		public System.Collections.Generic.List<Customer> ToList()
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Customer";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Customer[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}
		#endregion

		#region SELECT TOP()
		public System.Collections.Generic.List<Customer> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Customer", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Customer[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}
		#endregion

		#region SELECT .... WHERE Id=?

		public System.Collections.Generic.List<Customer> SelectById(System.Int32 Id)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Customer WHERE Id=@Id";
				command.Parameters.AddWithValue("@Id", Id);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE ContactId=?

		public System.Collections.Generic.List<Customer> SelectByContactId(System.Int32 ContactId)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Customer WHERE ContactId=@ContactId";
				command.Parameters.AddWithValue("@ContactId", ContactId);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Name=?

		public System.Collections.Generic.List<Customer> SelectByName(System.String Name)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Customer WHERE Name=@Name";
				command.Parameters.AddWithValue("@Name", Name);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Address=?

		public System.Collections.Generic.List<Customer> SelectByAddress(System.String Address)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Customer WHERE Address=@Address";
				command.Parameters.AddWithValue("@Address", Address);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE City=?

		public System.Collections.Generic.List<Customer> SelectByCity(System.String City)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Customer WHERE City=@City";
				command.Parameters.AddWithValue("@City", City);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE PostalCode=?

		public System.Collections.Generic.List<Customer> SelectByPostalCode(System.String PostalCode)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Customer WHERE PostalCode=@PostalCode";
				command.Parameters.AddWithValue("@PostalCode", PostalCode);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Country=?

		public System.Collections.Generic.List<Customer> SelectByCountry(System.String Country)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Customer WHERE Country=@Country";
				command.Parameters.AddWithValue("@Country", Country);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Email=?

		public System.Collections.Generic.List<Customer> SelectByEmail(System.String Email)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Customer WHERE Email=@Email";
				command.Parameters.AddWithValue("@Email", Email);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Phone=?

		public System.Collections.Generic.List<Customer> SelectByPhone(System.String Phone)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Customer WHERE Phone=@Phone";
				command.Parameters.AddWithValue("@Phone", Phone);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Fax=?

		public System.Collections.Generic.List<Customer> SelectByFax(System.String Fax)
		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Customer WHERE Fax=@Fax";
				command.Parameters.AddWithValue("@Fax", Fax);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		public System.Collections.Generic.List<Customer> SelectById(System.Int32 Id, int count)		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Id=@Id";
				command.Parameters.AddWithValue("@Id", Id);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE ContactId=?

		public System.Collections.Generic.List<Customer> SelectByContactId(System.Int32 ContactId, int count)		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE ContactId=@ContactId";
				command.Parameters.AddWithValue("@ContactId", ContactId);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Name=?

		public System.Collections.Generic.List<Customer> SelectByName(System.String Name, int count)		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Name=@Name";
				command.Parameters.AddWithValue("@Name", Name);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Address=?

		public System.Collections.Generic.List<Customer> SelectByAddress(System.String Address, int count)		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Address=@Address";
				command.Parameters.AddWithValue("@Address", Address);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE City=?

		public System.Collections.Generic.List<Customer> SelectByCity(System.String City, int count)		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE City=@City";
				command.Parameters.AddWithValue("@City", City);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE PostalCode=?

		public System.Collections.Generic.List<Customer> SelectByPostalCode(System.String PostalCode, int count)		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE PostalCode=@PostalCode";
				command.Parameters.AddWithValue("@PostalCode", PostalCode);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Country=?

		public System.Collections.Generic.List<Customer> SelectByCountry(System.String Country, int count)		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Country=@Country";
				command.Parameters.AddWithValue("@Country", Country);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Email=?

		public System.Collections.Generic.List<Customer> SelectByEmail(System.String Email, int count)		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Email=@Email";
				command.Parameters.AddWithValue("@Email", Email);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Phone=?

		public System.Collections.Generic.List<Customer> SelectByPhone(System.String Phone, int count)		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Phone=@Phone";
				command.Parameters.AddWithValue("@Phone", Phone);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Fax=?

		public System.Collections.Generic.List<Customer> SelectByFax(System.String Fax, int count)		{
			var list = new System.Collections.Generic.List<Customer>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Customer WHERE Fax=@Fax";
				command.Parameters.AddWithValue("@Fax", Fax);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Customer();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ContactId = (System.Int32?) (reader["ContactId"] is System.DBNull ? null : reader["ContactId"]);
						item.Name = reader["Name"] as System.String;
						item.Address = reader["Address"] as System.String;
						item.City = reader["City"] as System.String;
						item.PostalCode = reader["PostalCode"] as System.String;
						item.Country = reader["Country"] as System.String;
						item.Email = reader["Email"] as System.String;
						item.Phone = reader["Phone"] as System.String;
						item.Fax = reader["Fax"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region INSERT Customer
		public void Create(Customer item)
		{
			Create(
item.Id, item.ContactId, item.Name, item.Address, item.City, item.PostalCode, item.Country, item.Email, item.Phone, item.Fax);
		}
		#endregion

		#region INSERT Ignoring Primary Key
		public void Create(
System.Int32? ContactId, System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone, System.String Fax)
		{
			if (Name.Length > 100)
				throw new System.ArgumentException("Max length for Name is 100");
			if (Address.Length > 100)
				throw new System.ArgumentException("Max length for Address is 100");
			if (City.Length > 100)
				throw new System.ArgumentException("Max length for City is 100");
			if (PostalCode.Length > 100)
				throw new System.ArgumentException("Max length for PostalCode is 100");
			if (Country.Length > 100)
				throw new System.ArgumentException("Max length for Country is 100");
			if (Email.Length > 100)
				throw new System.ArgumentException("Max length for Email is 100");
			if (Phone.Length > 100)
				throw new System.ArgumentException("Max length for Phone is 100");
			if (Fax.Length > 100)
				throw new System.ArgumentException("Max length for Fax is 100");

			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "INSERT INTO Customer (ContactId, Name, Address, City, PostalCode, Country, Email, Phone, Fax)  VALUES (@ContactId, @Name, @Address, @City, @PostalCode, @Country, @Email, @Phone, @Fax)";
				command.Parameters.AddWithValue("@ContactId", ContactId != null ? (object)ContactId : System.DBNull.Value);
				command.Parameters.AddWithValue("@Name", Name != null ? (object)Name : System.DBNull.Value);
				command.Parameters.AddWithValue("@Address", Address != null ? (object)Address : System.DBNull.Value);
				command.Parameters.AddWithValue("@City", City != null ? (object)City : System.DBNull.Value);
				command.Parameters.AddWithValue("@PostalCode", PostalCode != null ? (object)PostalCode : System.DBNull.Value);
				command.Parameters.AddWithValue("@Country", Country != null ? (object)Country : System.DBNull.Value);
				command.Parameters.AddWithValue("@Email", Email != null ? (object)Email : System.DBNull.Value);
				command.Parameters.AddWithValue("@Phone", Phone != null ? (object)Phone : System.DBNull.Value);
				command.Parameters.AddWithValue("@Fax", Fax != null ? (object)Fax : System.DBNull.Value);
				command.ExecuteNonQuery();
			}
		}
		#endregion

		#region INSERT Customer by fields
		public Customer Create(
System.Int32? Id, System.Int32? ContactId, System.String Name, System.String Address, System.String City, System.String PostalCode, System.String Country, System.String Email, System.String Phone, System.String Fax)
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "INSERT INTO Customer (Id, ContactId, Name, Address, City, PostalCode, Country, Email, Phone, Fax)  VALUES (@Id, @ContactId, @Name, @Address, @City, @PostalCode, @Country, @Email, @Phone, @Fax)";
				command.Parameters.AddWithValue("@Id", Id != null ? (object)Id : System.DBNull.Value);
				command.Parameters.AddWithValue("@ContactId", ContactId != null ? (object)ContactId : System.DBNull.Value);
				command.Parameters.AddWithValue("@Name", Name != null ? (object)Name : System.DBNull.Value);
				command.Parameters.AddWithValue("@Address", Address != null ? (object)Address : System.DBNull.Value);
				command.Parameters.AddWithValue("@City", City != null ? (object)City : System.DBNull.Value);
				command.Parameters.AddWithValue("@PostalCode", PostalCode != null ? (object)PostalCode : System.DBNull.Value);
				command.Parameters.AddWithValue("@Country", Country != null ? (object)Country : System.DBNull.Value);
				command.Parameters.AddWithValue("@Email", Email != null ? (object)Email : System.DBNull.Value);
				command.Parameters.AddWithValue("@Phone", Phone != null ? (object)Phone : System.DBNull.Value);
				command.Parameters.AddWithValue("@Fax", Fax != null ? (object)Fax : System.DBNull.Value);
				command.ExecuteNonQuery();

				var item = new Customer();
				item.Id = Id;
				item.ContactId = ContactId;
				item.Name = Name;
				item.Address = Address;
				item.City = City;
				item.PostalCode = PostalCode;
				item.Country = Country;
				item.Email = Email;
				item.Phone = Phone;
				item.Fax = Fax;
				return item;
			}
		}
		#endregion

		#region INSERT MANY
		public void Create(System.Collections.Generic.IEnumerable<Customer> items)
		{
			foreach (var item in items)
				Create(
item.Id, item.ContactId, item.Name, item.Address, item.City, item.PostalCode, item.Country, item.Email, item.Phone, item.Fax);
		}
		#endregion

		#region DELETE
		public void Delete(Customer item)
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "DELETE FROM Customer WHERE Id = @Id AND ContactId = @ContactId AND Name = @Name AND Address = @Address AND City = @City AND PostalCode = @PostalCode AND Country = @Country AND Email = @Email AND Phone = @Phone AND Fax = @Fax";
				command.Parameters.AddWithValue("@Id", item.Id != null ? (object)item.Id : System.DBNull.Value);
				command.Parameters.AddWithValue("@ContactId", item.ContactId != null ? (object)item.ContactId : System.DBNull.Value);
				command.Parameters.AddWithValue("@Name", item.Name != null ? (object)item.Name : System.DBNull.Value);
				command.Parameters.AddWithValue("@Address", item.Address != null ? (object)item.Address : System.DBNull.Value);
				command.Parameters.AddWithValue("@City", item.City != null ? (object)item.City : System.DBNull.Value);
				command.Parameters.AddWithValue("@PostalCode", item.PostalCode != null ? (object)item.PostalCode : System.DBNull.Value);
				command.Parameters.AddWithValue("@Country", item.Country != null ? (object)item.Country : System.DBNull.Value);
				command.Parameters.AddWithValue("@Email", item.Email != null ? (object)item.Email : System.DBNull.Value);
				command.Parameters.AddWithValue("@Phone", item.Phone != null ? (object)item.Phone : System.DBNull.Value);
				command.Parameters.AddWithValue("@Fax", item.Fax != null ? (object)item.Fax : System.DBNull.Value);
				command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Id

		public int DeleteById(System.Int32? Id)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Customer WHERE Id=@Id";
				command.Parameters.AddWithValue("@Id", Id != null ? (object)Id : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY ContactId

		public int DeleteByContactId(System.Int32? ContactId)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Customer WHERE ContactId=@ContactId";
				command.Parameters.AddWithValue("@ContactId", ContactId != null ? (object)ContactId : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Name

		public int DeleteByName(System.String Name)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Customer WHERE Name=@Name";
				command.Parameters.AddWithValue("@Name", Name != null ? (object)Name : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Address

		public int DeleteByAddress(System.String Address)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Customer WHERE Address=@Address";
				command.Parameters.AddWithValue("@Address", Address != null ? (object)Address : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY City

		public int DeleteByCity(System.String City)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Customer WHERE City=@City";
				command.Parameters.AddWithValue("@City", City != null ? (object)City : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY PostalCode

		public int DeleteByPostalCode(System.String PostalCode)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Customer WHERE PostalCode=@PostalCode";
				command.Parameters.AddWithValue("@PostalCode", PostalCode != null ? (object)PostalCode : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Country

		public int DeleteByCountry(System.String Country)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Customer WHERE Country=@Country";
				command.Parameters.AddWithValue("@Country", Country != null ? (object)Country : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Email

		public int DeleteByEmail(System.String Email)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Customer WHERE Email=@Email";
				command.Parameters.AddWithValue("@Email", Email != null ? (object)Email : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Phone

		public int DeleteByPhone(System.String Phone)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Customer WHERE Phone=@Phone";
				command.Parameters.AddWithValue("@Phone", Phone != null ? (object)Phone : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Fax

		public int DeleteByFax(System.String Fax)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Customer WHERE Fax=@Fax";
				command.Parameters.AddWithValue("@Fax", Fax != null ? (object)Fax : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region Purge
		public void Purge()
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "DELETE FROM Customer";
				command.ExecuteNonQuery();
			}

		}
		#endregion

		#region UPDATE
		public void Update(Customer item)
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "UPDATE Customer SET ContactId = @ContactId, Name = @Name, Address = @Address, City = @City, PostalCode = @PostalCode, Country = @Country, Email = @Email, Phone = @Phone, Fax = @Fax WHERE Id = @Id";
				command.Parameters.AddWithValue("@Id", item.Id != null ? (object)item.Id : System.DBNull.Value);
				command.Parameters.AddWithValue("@ContactId", item.ContactId != null ? (object)item.ContactId : System.DBNull.Value);
				command.Parameters.AddWithValue("@Name", item.Name != null ? (object)item.Name : System.DBNull.Value);
				command.Parameters.AddWithValue("@Address", item.Address != null ? (object)item.Address : System.DBNull.Value);
				command.Parameters.AddWithValue("@City", item.City != null ? (object)item.City : System.DBNull.Value);
				command.Parameters.AddWithValue("@PostalCode", item.PostalCode != null ? (object)item.PostalCode : System.DBNull.Value);
				command.Parameters.AddWithValue("@Country", item.Country != null ? (object)item.Country : System.DBNull.Value);
				command.Parameters.AddWithValue("@Email", item.Email != null ? (object)item.Email : System.DBNull.Value);
				command.Parameters.AddWithValue("@Phone", item.Phone != null ? (object)item.Phone : System.DBNull.Value);
				command.Parameters.AddWithValue("@Fax", item.Fax != null ? (object)item.Fax : System.DBNull.Value);
				command.ExecuteNonQuery();
			}
		}
		#endregion

	}
	#endregion

	#region Product Repository
	public interface IProductRepository : IRepository<Product>
	{
		System.Collections.Generic.List<Product> SelectById(System.Int32 Id);
		System.Collections.Generic.List<Product> SelectById(System.Int32 Id, int count);
		System.Collections.Generic.List<Product> SelectByPartNumber(System.String PartNumber);
		System.Collections.Generic.List<Product> SelectByPartNumber(System.String PartNumber, int count);
		System.Collections.Generic.List<Product> SelectByEan13(System.String Ean13);
		System.Collections.Generic.List<Product> SelectByEan13(System.String Ean13, int count);
		System.Collections.Generic.List<Product> SelectByName(System.String Name);
		System.Collections.Generic.List<Product> SelectByName(System.String Name, int count);
		System.Collections.Generic.List<Product> SelectByDescription(System.String Description);
		System.Collections.Generic.List<Product> SelectByDescription(System.String Description, int count);
	}

	public partial class ProductRepository : IProductRepository
	{
		#region SELECT *
		public System.Collections.Generic.List<Product> ToList()
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Product";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.PartNumber = reader["PartNumber"] as System.String;
						item.Ean13 = reader["Ean13"] as System.String;
						item.Name = reader["Name"] as System.String;
						item.Description = reader["Description"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Product[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}
		#endregion

		#region SELECT TOP()
		public System.Collections.Generic.List<Product> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Product", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.PartNumber = reader["PartNumber"] as System.String;
						item.Ean13 = reader["Ean13"] as System.String;
						item.Name = reader["Name"] as System.String;
						item.Description = reader["Description"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Product[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}
		#endregion

		#region SELECT .... WHERE Id=?

		public System.Collections.Generic.List<Product> SelectById(System.Int32 Id)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Product WHERE Id=@Id";
				command.Parameters.AddWithValue("@Id", Id);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.PartNumber = reader["PartNumber"] as System.String;
						item.Ean13 = reader["Ean13"] as System.String;
						item.Name = reader["Name"] as System.String;
						item.Description = reader["Description"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE PartNumber=?

		public System.Collections.Generic.List<Product> SelectByPartNumber(System.String PartNumber)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Product WHERE PartNumber=@PartNumber";
				command.Parameters.AddWithValue("@PartNumber", PartNumber);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.PartNumber = reader["PartNumber"] as System.String;
						item.Ean13 = reader["Ean13"] as System.String;
						item.Name = reader["Name"] as System.String;
						item.Description = reader["Description"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Ean13=?

		public System.Collections.Generic.List<Product> SelectByEan13(System.String Ean13)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Product WHERE Ean13=@Ean13";
				command.Parameters.AddWithValue("@Ean13", Ean13);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.PartNumber = reader["PartNumber"] as System.String;
						item.Ean13 = reader["Ean13"] as System.String;
						item.Name = reader["Name"] as System.String;
						item.Description = reader["Description"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Name=?

		public System.Collections.Generic.List<Product> SelectByName(System.String Name)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Product WHERE Name=@Name";
				command.Parameters.AddWithValue("@Name", Name);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.PartNumber = reader["PartNumber"] as System.String;
						item.Ean13 = reader["Ean13"] as System.String;
						item.Name = reader["Name"] as System.String;
						item.Description = reader["Description"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Description=?

		public System.Collections.Generic.List<Product> SelectByDescription(System.String Description)
		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Product WHERE Description=@Description";
				command.Parameters.AddWithValue("@Description", Description);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.PartNumber = reader["PartNumber"] as System.String;
						item.Ean13 = reader["Ean13"] as System.String;
						item.Name = reader["Name"] as System.String;
						item.Description = reader["Description"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		public System.Collections.Generic.List<Product> SelectById(System.Int32 Id, int count)		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Id=@Id";
				command.Parameters.AddWithValue("@Id", Id);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.PartNumber = reader["PartNumber"] as System.String;
						item.Ean13 = reader["Ean13"] as System.String;
						item.Name = reader["Name"] as System.String;
						item.Description = reader["Description"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE PartNumber=?

		public System.Collections.Generic.List<Product> SelectByPartNumber(System.String PartNumber, int count)		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE PartNumber=@PartNumber";
				command.Parameters.AddWithValue("@PartNumber", PartNumber);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.PartNumber = reader["PartNumber"] as System.String;
						item.Ean13 = reader["Ean13"] as System.String;
						item.Name = reader["Name"] as System.String;
						item.Description = reader["Description"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Ean13=?

		public System.Collections.Generic.List<Product> SelectByEan13(System.String Ean13, int count)		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Ean13=@Ean13";
				command.Parameters.AddWithValue("@Ean13", Ean13);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.PartNumber = reader["PartNumber"] as System.String;
						item.Ean13 = reader["Ean13"] as System.String;
						item.Name = reader["Name"] as System.String;
						item.Description = reader["Description"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Name=?

		public System.Collections.Generic.List<Product> SelectByName(System.String Name, int count)		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Name=@Name";
				command.Parameters.AddWithValue("@Name", Name);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.PartNumber = reader["PartNumber"] as System.String;
						item.Ean13 = reader["Ean13"] as System.String;
						item.Name = reader["Name"] as System.String;
						item.Description = reader["Description"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Description=?

		public System.Collections.Generic.List<Product> SelectByDescription(System.String Description, int count)		{
			var list = new System.Collections.Generic.List<Product>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Product WHERE Description=@Description";
				command.Parameters.AddWithValue("@Description", Description);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Product();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.PartNumber = reader["PartNumber"] as System.String;
						item.Ean13 = reader["Ean13"] as System.String;
						item.Name = reader["Name"] as System.String;
						item.Description = reader["Description"] as System.String;
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region INSERT Product
		public void Create(Product item)
		{
			Create(
item.Id, item.PartNumber, item.Ean13, item.Name, item.Description);
		}
		#endregion

		#region INSERT Ignoring Primary Key
		public void Create(
System.String PartNumber, System.String Ean13, System.String Name, System.String Description)
		{
			if (PartNumber.Length > 100)
				throw new System.ArgumentException("Max length for PartNumber is 100");
			if (Ean13.Length > 100)
				throw new System.ArgumentException("Max length for Ean13 is 100");
			if (Name.Length > 100)
				throw new System.ArgumentException("Max length for Name is 100");
			if (Description.Length > 100)
				throw new System.ArgumentException("Max length for Description is 100");

			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "INSERT INTO Product (PartNumber, Ean13, Name, Description)  VALUES (@PartNumber, @Ean13, @Name, @Description)";
				command.Parameters.AddWithValue("@PartNumber", PartNumber != null ? (object)PartNumber : System.DBNull.Value);
				command.Parameters.AddWithValue("@Ean13", Ean13 != null ? (object)Ean13 : System.DBNull.Value);
				command.Parameters.AddWithValue("@Name", Name != null ? (object)Name : System.DBNull.Value);
				command.Parameters.AddWithValue("@Description", Description != null ? (object)Description : System.DBNull.Value);
				command.ExecuteNonQuery();
			}
		}
		#endregion

		#region INSERT Product by fields
		public Product Create(
System.Int32? Id, System.String PartNumber, System.String Ean13, System.String Name, System.String Description)
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "INSERT INTO Product (Id, PartNumber, Ean13, Name, Description)  VALUES (@Id, @PartNumber, @Ean13, @Name, @Description)";
				command.Parameters.AddWithValue("@Id", Id != null ? (object)Id : System.DBNull.Value);
				command.Parameters.AddWithValue("@PartNumber", PartNumber != null ? (object)PartNumber : System.DBNull.Value);
				command.Parameters.AddWithValue("@Ean13", Ean13 != null ? (object)Ean13 : System.DBNull.Value);
				command.Parameters.AddWithValue("@Name", Name != null ? (object)Name : System.DBNull.Value);
				command.Parameters.AddWithValue("@Description", Description != null ? (object)Description : System.DBNull.Value);
				command.ExecuteNonQuery();

				var item = new Product();
				item.Id = Id;
				item.PartNumber = PartNumber;
				item.Ean13 = Ean13;
				item.Name = Name;
				item.Description = Description;
				return item;
			}
		}
		#endregion

		#region INSERT MANY
		public void Create(System.Collections.Generic.IEnumerable<Product> items)
		{
			foreach (var item in items)
				Create(
item.Id, item.PartNumber, item.Ean13, item.Name, item.Description);
		}
		#endregion

		#region DELETE
		public void Delete(Product item)
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "DELETE FROM Product WHERE Id = @Id AND PartNumber = @PartNumber AND Ean13 = @Ean13 AND Name = @Name AND Description = @Description";
				command.Parameters.AddWithValue("@Id", item.Id != null ? (object)item.Id : System.DBNull.Value);
				command.Parameters.AddWithValue("@PartNumber", item.PartNumber != null ? (object)item.PartNumber : System.DBNull.Value);
				command.Parameters.AddWithValue("@Ean13", item.Ean13 != null ? (object)item.Ean13 : System.DBNull.Value);
				command.Parameters.AddWithValue("@Name", item.Name != null ? (object)item.Name : System.DBNull.Value);
				command.Parameters.AddWithValue("@Description", item.Description != null ? (object)item.Description : System.DBNull.Value);
				command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Id

		public int DeleteById(System.Int32? Id)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Product WHERE Id=@Id";
				command.Parameters.AddWithValue("@Id", Id != null ? (object)Id : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY PartNumber

		public int DeleteByPartNumber(System.String PartNumber)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Product WHERE PartNumber=@PartNumber";
				command.Parameters.AddWithValue("@PartNumber", PartNumber != null ? (object)PartNumber : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Ean13

		public int DeleteByEan13(System.String Ean13)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Product WHERE Ean13=@Ean13";
				command.Parameters.AddWithValue("@Ean13", Ean13 != null ? (object)Ean13 : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Name

		public int DeleteByName(System.String Name)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Product WHERE Name=@Name";
				command.Parameters.AddWithValue("@Name", Name != null ? (object)Name : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Description

		public int DeleteByDescription(System.String Description)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Product WHERE Description=@Description";
				command.Parameters.AddWithValue("@Description", Description != null ? (object)Description : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region Purge
		public void Purge()
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "DELETE FROM Product";
				command.ExecuteNonQuery();
			}

		}
		#endregion

		#region UPDATE
		public void Update(Product item)
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "UPDATE Product SET PartNumber = @PartNumber, Ean13 = @Ean13, Name = @Name, Description = @Description WHERE Id = @Id";
				command.Parameters.AddWithValue("@Id", item.Id != null ? (object)item.Id : System.DBNull.Value);
				command.Parameters.AddWithValue("@PartNumber", item.PartNumber != null ? (object)item.PartNumber : System.DBNull.Value);
				command.Parameters.AddWithValue("@Ean13", item.Ean13 != null ? (object)item.Ean13 : System.DBNull.Value);
				command.Parameters.AddWithValue("@Name", item.Name != null ? (object)item.Name : System.DBNull.Value);
				command.Parameters.AddWithValue("@Description", item.Description != null ? (object)item.Description : System.DBNull.Value);
				command.ExecuteNonQuery();
			}
		}
		#endregion

	}
	#endregion

	#region Stock Repository
	public interface IStockRepository : IRepository<Stock>
	{
		System.Collections.Generic.List<Stock> SelectById(System.Int32 Id);
		System.Collections.Generic.List<Stock> SelectById(System.Int32 Id, int count);
		System.Collections.Generic.List<Stock> SelectByProductId(System.Int32 ProductId);
		System.Collections.Generic.List<Stock> SelectByProductId(System.Int32 ProductId, int count);
		System.Collections.Generic.List<Stock> SelectByQuantity(System.Int32 Quantity);
		System.Collections.Generic.List<Stock> SelectByQuantity(System.Int32 Quantity, int count);
		System.Collections.Generic.List<Stock> SelectByLastUpdated(System.DateTime LastUpdated);
		System.Collections.Generic.List<Stock> SelectByLastUpdated(System.DateTime LastUpdated, int count);
	}

	public partial class StockRepository : IStockRepository
	{
		#region SELECT *
		public System.Collections.Generic.List<Stock> ToList()
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Stock";
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader["ProductId"] is System.DBNull ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader["Quantity"] is System.DBNull ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader["LastUpdated"] is System.DBNull ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Stock[] ToArray()
		{
			var list = ToList();
			return list != null ? list.ToArray() : null;
		}
		#endregion

		#region SELECT TOP()
		public System.Collections.Generic.List<Stock> ToList(int count)
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = string.Format("SELECT TOP({0}) * FROM Stock", count);
				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader["ProductId"] is System.DBNull ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader["Quantity"] is System.DBNull ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader["LastUpdated"] is System.DBNull ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}

		public Stock[] ToArray(int count)
		{
			var list = ToList(count);
			return list != null ? list.ToArray() : null;
		}
		#endregion

		#region SELECT .... WHERE Id=?

		public System.Collections.Generic.List<Stock> SelectById(System.Int32 Id)
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Stock WHERE Id=@Id";
				command.Parameters.AddWithValue("@Id", Id);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader["ProductId"] is System.DBNull ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader["Quantity"] is System.DBNull ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader["LastUpdated"] is System.DBNull ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE ProductId=?

		public System.Collections.Generic.List<Stock> SelectByProductId(System.Int32 ProductId)
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Stock WHERE ProductId=@ProductId";
				command.Parameters.AddWithValue("@ProductId", ProductId);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader["ProductId"] is System.DBNull ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader["Quantity"] is System.DBNull ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader["LastUpdated"] is System.DBNull ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE Quantity=?

		public System.Collections.Generic.List<Stock> SelectByQuantity(System.Int32 Quantity)
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Stock WHERE Quantity=@Quantity";
				command.Parameters.AddWithValue("@Quantity", Quantity);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader["ProductId"] is System.DBNull ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader["Quantity"] is System.DBNull ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader["LastUpdated"] is System.DBNull ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT .... WHERE LastUpdated=?

		public System.Collections.Generic.List<Stock> SelectByLastUpdated(System.DateTime LastUpdated)
		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT * FROM Stock WHERE LastUpdated=@LastUpdated";
				command.Parameters.AddWithValue("@LastUpdated", LastUpdated);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader["ProductId"] is System.DBNull ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader["Quantity"] is System.DBNull ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader["LastUpdated"] is System.DBNull ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Id=?

		public System.Collections.Generic.List<Stock> SelectById(System.Int32 Id, int count)		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Stock WHERE Id=@Id";
				command.Parameters.AddWithValue("@Id", Id);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader["ProductId"] is System.DBNull ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader["Quantity"] is System.DBNull ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader["LastUpdated"] is System.DBNull ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE ProductId=?

		public System.Collections.Generic.List<Stock> SelectByProductId(System.Int32 ProductId, int count)		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Stock WHERE ProductId=@ProductId";
				command.Parameters.AddWithValue("@ProductId", ProductId);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader["ProductId"] is System.DBNull ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader["Quantity"] is System.DBNull ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader["LastUpdated"] is System.DBNull ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE Quantity=?

		public System.Collections.Generic.List<Stock> SelectByQuantity(System.Int32 Quantity, int count)		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Stock WHERE Quantity=@Quantity";
				command.Parameters.AddWithValue("@Quantity", Quantity);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader["ProductId"] is System.DBNull ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader["Quantity"] is System.DBNull ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader["LastUpdated"] is System.DBNull ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region SELECT TOP(?).... WHERE LastUpdated=?

		public System.Collections.Generic.List<Stock> SelectByLastUpdated(System.DateTime LastUpdated, int count)		{
			var list = new System.Collections.Generic.List<Stock>();
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "SELECT TOP(" + count + ") * FROM Stock WHERE LastUpdated=@LastUpdated";
				command.Parameters.AddWithValue("@LastUpdated", LastUpdated);

				using (var reader = command.ExecuteReader())
				{
					while (reader.Read())
					{
						var item = new Stock();
						item.Id = (System.Int32?) (reader["Id"] is System.DBNull ? null : reader["Id"]);
						item.ProductId = (System.Int32?) (reader["ProductId"] is System.DBNull ? null : reader["ProductId"]);
						item.Quantity = (System.Int32?) (reader["Quantity"] is System.DBNull ? null : reader["Quantity"]);
						item.LastUpdated = (System.DateTime?) (reader["LastUpdated"] is System.DBNull ? null : reader["LastUpdated"]);
						list.Add(item);
					}
				}
			}
			return list.Count > 0 ? list : null;
		}
		#endregion

		#region INSERT Stock
		public void Create(Stock item)
		{
			Create(
item.Id, item.ProductId, item.Quantity, item.LastUpdated);
		}
		#endregion

		#region INSERT Ignoring Primary Key
		public void Create(
System.Int32? ProductId, System.Int32? Quantity, System.DateTime? LastUpdated)
		{

			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "INSERT INTO Stock (ProductId, Quantity, LastUpdated)  VALUES (@ProductId, @Quantity, @LastUpdated)";
				command.Parameters.AddWithValue("@ProductId", ProductId != null ? (object)ProductId : System.DBNull.Value);
				command.Parameters.AddWithValue("@Quantity", Quantity != null ? (object)Quantity : System.DBNull.Value);
				command.Parameters.AddWithValue("@LastUpdated", LastUpdated != null ? (object)LastUpdated : System.DBNull.Value);
				command.ExecuteNonQuery();
			}
		}
		#endregion

		#region INSERT Stock by fields
		public Stock Create(
System.Int32? Id, System.Int32? ProductId, System.Int32? Quantity, System.DateTime? LastUpdated)
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "INSERT INTO Stock (Id, ProductId, Quantity, LastUpdated)  VALUES (@Id, @ProductId, @Quantity, @LastUpdated)";
				command.Parameters.AddWithValue("@Id", Id != null ? (object)Id : System.DBNull.Value);
				command.Parameters.AddWithValue("@ProductId", ProductId != null ? (object)ProductId : System.DBNull.Value);
				command.Parameters.AddWithValue("@Quantity", Quantity != null ? (object)Quantity : System.DBNull.Value);
				command.Parameters.AddWithValue("@LastUpdated", LastUpdated != null ? (object)LastUpdated : System.DBNull.Value);
				command.ExecuteNonQuery();

				var item = new Stock();
				item.Id = Id;
				item.ProductId = ProductId;
				item.Quantity = Quantity;
				item.LastUpdated = LastUpdated;
				return item;
			}
		}
		#endregion

		#region INSERT MANY
		public void Create(System.Collections.Generic.IEnumerable<Stock> items)
		{
			foreach (var item in items)
				Create(
item.Id, item.ProductId, item.Quantity, item.LastUpdated);
		}
		#endregion

		#region DELETE
		public void Delete(Stock item)
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "DELETE FROM Stock WHERE Id = @Id AND ProductId = @ProductId AND Quantity = @Quantity AND LastUpdated = @LastUpdated";
				command.Parameters.AddWithValue("@Id", item.Id != null ? (object)item.Id : System.DBNull.Value);
				command.Parameters.AddWithValue("@ProductId", item.ProductId != null ? (object)item.ProductId : System.DBNull.Value);
				command.Parameters.AddWithValue("@Quantity", item.Quantity != null ? (object)item.Quantity : System.DBNull.Value);
				command.Parameters.AddWithValue("@LastUpdated", item.LastUpdated != null ? (object)item.LastUpdated : System.DBNull.Value);
				command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Id

		public int DeleteById(System.Int32? Id)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Stock WHERE Id=@Id";
				command.Parameters.AddWithValue("@Id", Id != null ? (object)Id : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY ProductId

		public int DeleteByProductId(System.Int32? ProductId)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Stock WHERE ProductId=@ProductId";
				command.Parameters.AddWithValue("@ProductId", ProductId != null ? (object)ProductId : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY Quantity

		public int DeleteByQuantity(System.Int32? Quantity)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Stock WHERE Quantity=@Quantity";
				command.Parameters.AddWithValue("@Quantity", Quantity != null ? (object)Quantity : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region DELETE BY LastUpdated

		public int DeleteByLastUpdated(System.DateTime? LastUpdated)
		{
			using (var command = EntityBase.CreateCommand())
			{

				command.CommandText = "DELETE FROM Stock WHERE LastUpdated=@LastUpdated";
				command.Parameters.AddWithValue("@LastUpdated", LastUpdated != null ? (object)LastUpdated : System.DBNull.Value);
				return command.ExecuteNonQuery();
			}
		}
		#endregion

		#region Purge
		public void Purge()
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "DELETE FROM Stock";
				command.ExecuteNonQuery();
			}

		}
		#endregion

		#region UPDATE
		public void Update(Stock item)
		{
			using (var command = EntityBase.CreateCommand())
			{
				command.CommandText = "UPDATE Stock SET ProductId = @ProductId, Quantity = @Quantity, LastUpdated = @LastUpdated WHERE Id = @Id";
				command.Parameters.AddWithValue("@Id", item.Id != null ? (object)item.Id : System.DBNull.Value);
				command.Parameters.AddWithValue("@ProductId", item.ProductId != null ? (object)item.ProductId : System.DBNull.Value);
				command.Parameters.AddWithValue("@Quantity", item.Quantity != null ? (object)item.Quantity : System.DBNull.Value);
				command.Parameters.AddWithValue("@LastUpdated", item.LastUpdated != null ? (object)item.LastUpdated : System.DBNull.Value);
				command.ExecuteNonQuery();
			}
		}
		#endregion

	}
	#endregion

}
