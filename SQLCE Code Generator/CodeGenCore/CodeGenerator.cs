using System.Text;
using System.IO;
using System.Globalization;
using System.Collections.Generic;

namespace ChristianHelle.DatabaseTools.SqlCe.CodeGenCore
{
    public abstract class CodeGenerator
    {
        protected readonly StringBuilder code;

        protected CodeGenerator(SqlCeDatabase database)
        {
            Database = database;
            code = new StringBuilder();
            code.AppendLine();
        }

        public SqlCeDatabase Database { get; set; }
        public abstract void GenerateEntities();
        public abstract void GenerateEntities(EntityGeneratorOptions options);
        public abstract void GenerateDataAccessLayer();
        public abstract void GenerateDataAccessLayer(DataAccessLayerGeneratorOptions options);

        public string GetCode()
        {
            using (var writer = new StringWriter(code, CultureInfo.InvariantCulture))
                return writer.ToString();
        }

        public void WriteHeaderInformation()
        {
            code.AppendLine("/*");
            code.AppendLine("\tThe code below was generated by the SQL CE Code Generator  (http://sqlcecodegen.codeplex.com)");
            code.AppendLine("\n\tSQL CE Code Generator was written by Christian Resma Helle");
            code.AppendLine("*/");
            code.AppendLine();
        }

        public void ClearCode()
        {
            code.Remove(0, code.Length - 1);
        }

        protected void GenerateXmlDoc(int tabPrefixCount, string summary, params KeyValuePair<string, string>[] parameters)
        {
            for (int i = 0; i < tabPrefixCount; i++)
                code.Append("\t");
            code.AppendLine("/// <summary>");

            for (int i = 0; i < tabPrefixCount; i++)
                code.Append("\t");
            code.AppendLine("/// " + summary);

            for (int i = 0; i < tabPrefixCount; i++)
                code.Append("\t");
            code.AppendLine("/// </summary>");

            foreach (var parameter in parameters)
            {
                for (int i = 0; i < tabPrefixCount; i++)
                    code.Append("\t");
                code.AppendFormat("<param name=\"{0}\">{1}</param>", parameter.Key, parameter.Value);
                code.AppendLine();
            }
        }
    }
}
