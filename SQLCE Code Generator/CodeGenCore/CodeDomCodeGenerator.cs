using System;
using System.Collections.Generic;
using System.CodeDom;
using System.Globalization;
using Microsoft.CSharp;
using System.IO;
using System.CodeDom.Compiler;
using Microsoft.VisualBasic;
using System.Data.SqlServerCe;

namespace ChristianHelle.DatabaseTools.SqlCe.CodeGenCore
{
    public class CodeDomCodeGenerator : CodeGenerator, IDisposable
    {
        protected readonly CodeCompileUnit compileUnit;
        protected readonly CodeNamespace codeNamespace;
        protected readonly CodeDomProvider provider;

        public CodeDomCodeGenerator(SqlCeDatabase tableDetails, CodeDomProvider provider)
            : base(tableDetails)
        {
            this.provider = provider;

            compileUnit = new CodeCompileUnit();
            codeNamespace = new CodeNamespace(Database.Namespace);
            compileUnit.Namespaces.Add(codeNamespace);
        }

        public override string GetCode()
        {
            using (var writer = new StringWriter(code))
                provider.GenerateCodeFromCompileUnit(compileUnit, writer, new CodeGeneratorOptions());
            return code.ToString();
        }

        public override void ClearCode()
        {
            codeNamespace.Comments.Clear();
            codeNamespace.Imports.Clear();
            codeNamespace.Types.Clear();
            base.ClearCode();
        }

        private static void GenerateXmlDoc(CodeCommentStatementCollection comments, string summary, params KeyValuePair<string, string>[] parameters)
        {
            comments.Add(new CodeCommentStatement("<summary>", true));
            comments.Add(new CodeCommentStatement(summary, true));
            comments.Add(new CodeCommentStatement("</summary>", true));

            foreach (var parameter in parameters)
                comments.Add(
                    new CodeCommentStatement(
                        string.Format("<param name=\"{0}\">{1}</param>", parameter.Key, parameter.Value), true));
        }

        public override void WriteHeaderInformation()
        {
            codeNamespace.Comments.Add(new CodeCommentStatement(string.Empty));
            codeNamespace.Comments.Add(new CodeCommentStatement("--------------------------------------------------------------------------------------------------"));
            codeNamespace.Comments.Add(new CodeCommentStatement("<auto-generatedInfo>"));
            codeNamespace.Comments.Add(new CodeCommentStatement("\tThis code was generated by SQL CE Code Generator (http://sqlcecodegen.codeplex.com)"));
            codeNamespace.Comments.Add(new CodeCommentStatement("\tSQL CE Code Generator was written by Christian Resma Helle"));
            codeNamespace.Comments.Add(new CodeCommentStatement("\tand is under GNU General Public License version 2 (GPLv2)"));
            codeNamespace.Comments.Add(new CodeCommentStatement(string.Empty));
            codeNamespace.Comments.Add(new CodeCommentStatement("\tThis code contains class representations of the objects defined in the SQL CE database schema"));
            codeNamespace.Comments.Add(new CodeCommentStatement(string.Empty));
            codeNamespace.Comments.Add(new CodeCommentStatement("\tGenerated: " + DateTime.Now.ToString(CultureInfo.InvariantCulture)));
            codeNamespace.Comments.Add(new CodeCommentStatement("</auto-generatedInfo>"));
            codeNamespace.Comments.Add(new CodeCommentStatement("--------------------------------------------------------------------------------------------------"));
            codeNamespace.Comments.Add(new CodeCommentStatement(string.Empty));
        }

        public override void GenerateEntities()
        {
            GenerateEntities(new EntityGeneratorOptions());
        }

        public override void GenerateEntities(EntityGeneratorOptions options)
        {
            foreach (var table in Database.Tables)
            {
                var type = new CodeTypeDeclaration(table.Name);
                type.Attributes = MemberAttributes.Public;
                type.IsPartial = true;
                type.IsClass = true;
                GenerateXmlDoc(type.Comments, "Represents the " + table.Name + " table");

                foreach (var column in table.Columns)
                {
                    var field = new CodeMemberField(column.Value.ManagedType, "_" + column.Key);
                    field.Attributes = MemberAttributes.Private;
                    type.Members.Add(field);
                }

                foreach (var column in table.Columns)
                {
                    if (!column.Value.ManagedType.Equals(typeof(string)) || !column.Value.MaxLength.HasValue)
                        continue;

                    var maxLengthField = new CodeMemberField(typeof(int), column.Key + "_MAX_LENGTH");
                    maxLengthField.Attributes = MemberAttributes.Private | MemberAttributes.Const;
                    maxLengthField.InitExpression = new CodePrimitiveExpression(column.Value.MaxLength);

                    GenerateXmlDoc(maxLengthField.Comments, "The Maximum Length the " + column.Value.Name + " field allows");
                    type.Members.Add(maxLengthField);
                }

                foreach (var column in table.Columns)
                {
                    var property = new CodeMemberProperty();
                    property.Name = column.Key;
                    property.Type = new CodeTypeReference(column.Value.ManagedType);
                    property.Attributes = MemberAttributes.Public | MemberAttributes.Final;
                    GenerateXmlDoc(property.Comments, "Gets or sets the value of " + column.Value.Name);

                    property.GetStatements.Add(
                        new CodeMethodReturnStatement(
                            new CodeFieldReferenceExpression(
                                new CodeThisReferenceExpression(), "_" + column.Key)));

                    if (column.Value.ManagedType.Equals(typeof(string)))
                        property.SetStatements.Add(
                            new CodeConditionStatement(
                                new CodeSnippetExpression("value.Length > " + column.Key + "_MAX_LENGTH"),
                                new CodeThrowExceptionStatement(
                                    new CodeObjectCreateExpression(
                                        new CodeTypeReference(typeof(ArgumentException)),
                                        new CodePrimitiveExpression("Max length for " + column.Key + " is " + column.Value.MaxLength)))));

                    property.SetStatements.Add(
                        new CodeAssignStatement(
                            new CodeFieldReferenceExpression(
                                new CodeThisReferenceExpression(), "_" + column.Key),
                                new CodePropertySetValueReferenceExpression()));

                    type.Members.Add(property);
                }

                codeNamespace.Types.Add(type);
            }
        }

        public override void GenerateDataAccessLayer()
        {
            GenerateDataAccessLayer(new DataAccessLayerGeneratorOptions());
        }

        public override void GenerateDataAccessLayer(DataAccessLayerGeneratorOptions options)
        {
            GenerateEntityBase();
            GenerateCreateDatabase();
            GenerateIRepository();
            GenerateIDataRepository();

            foreach (var table in Database.Tables)
            {
                GenerateITableRepository(table);
                GenerateTableRepository(table);
            }

            code.AppendLine("}");
        }

        private void GenerateITableRepository(Table table)
        {
        }

        private void GenerateTableRepository(Table table)
        {
        }

        private void GenerateIDataRepository()
        {
        }

        private void GenerateIRepository()
        {
        }

        private void GenerateCreateDatabase()
        {
        }

        private void GenerateEntityBase()
        {
            // public static class EntityBase
            var type = new CodeTypeDeclaration("EntityBase");
            type.Attributes = MemberAttributes.Public | MemberAttributes.Static;
            type.IsPartial = true;
            type.IsClass = true;
            GenerateXmlDoc(type.Comments, "Base class for all data access repositories");

            // private static readonly object syncLock = new object();
            var lockField = new CodeMemberField(typeof(object), "syncLock");
            lockField.Attributes = MemberAttributes.Private | MemberAttributes.Static | MemberAttributes.Final;
            lockField.InitExpression = new CodeObjectCreateExpression(typeof(object));

            // private static SqlCeConnection connectionInstance;
            var connField = new CodeMemberField(typeof(SqlCeConnection), "connectionInstance");
            connField.Attributes = MemberAttributes.Private | MemberAttributes.Static;

            // private static string connectionString;
            var connStrField = new CodeMemberField(typeof(string), "connectionString");
            connStrField.Attributes = MemberAttributes.Public | MemberAttributes.Static;

            // public static string ConnectionString
            var connStrProperty = new CodeMemberProperty();
            connStrProperty.Name = "ConnectionString";
            connStrProperty.Type = new CodeTypeReference(typeof(SqlCeConnection));
            connStrProperty.Attributes = MemberAttributes.Public | MemberAttributes.Static;
            GenerateXmlDoc(connStrProperty.Comments, "Gets or sets the global SQL CE Connection String to be used");

            // get { }
            connStrProperty.GetStatements.Add(
                 new CodeMethodReturnStatement(
                     new CodeFieldReferenceExpression(
                         new CodeThisReferenceExpression(), "connectionString")));

            // set { }
            connStrProperty.SetStatements.Add(
                new CodeAssignStatement(
                    new CodeFieldReferenceExpression(
                        new CodeThisReferenceExpression(), "connectionString"),
                        new CodePropertySetValueReferenceExpression()));

            // public static SqlCeConnection Connection
            var connectionProperty = new CodeMemberProperty();
            connectionProperty.Name = "Connection";
            connectionProperty.Type = new CodeTypeReference(typeof(SqlCeConnection));
            connectionProperty.Attributes = MemberAttributes.Public | MemberAttributes.Static;
            GenerateXmlDoc(connectionProperty.Comments, "Gets or sets the value of Connection");

            // get { }

            // if (connectionInstance == null)
            //     connection.Open();
            connectionProperty.GetStatements.Add(
                new CodeConditionStatement(
                    new CodeSnippetExpression("connectionInstance == null"),
                    new CodeExpressionStatement(
                        new CodeFieldReferenceExpression(
                            new CodeObjectCreateExpression(), "connectionInstance"))));

            // if (connectionInstance.State != System.Data.ConnectionState.Open)
            //     connection.Open();
            connectionProperty.GetStatements.Add(
                new CodeConditionStatement(
                    new CodeSnippetExpression("connectionInstance.State != System.Data.ConnectionState.Open"),
                    new CodeSnippetStatement("connectionInstance.Open")));

            // return connectionInstance;
            connectionProperty.GetStatements.Add(
                 new CodeMethodReturnStatement(
                     new CodeFieldReferenceExpression(
                         new CodeThisReferenceExpression(), "connectionInstance")));

            // set { }
            connectionProperty.SetStatements.Add(
                new CodeAssignStatement(
                    new CodeFieldReferenceExpression(
                        new CodeThisReferenceExpression(), "connectionInstance"),
                        new CodePropertySetValueReferenceExpression()));

            type.Members.Add(lockField);
            type.Members.Add(connStrField);
            type.Members.Add(connField);
            type.Members.Add(connectionProperty);
            codeNamespace.Types.Add(type);

            //code.AppendLine("\t#region EntityBase");
            //code.AppendLine();
            //GenerateXmlDoc(1, "Base class for all data access repositories");
            //code.AppendLine("\tpublic static class EntityBase");
            //code.AppendLine("\t{");
            //code.AppendLine("\t\tprivate static System.Data.SqlServerCe.SqlCeConnection connectionInstance = null;");
            //code.AppendLine("\t\tprivate static readonly object syncLock = new object();");
            //code.AppendLine();
            //GenerateXmlDoc(2, "Gets or sets the global SQL CE Connection String to be used");
            //code.AppendLine("\t\tpublic static System.String ConnectionString { get; set; }");
            //code.AppendLine();
            //GenerateXmlDoc(2, "Gets or sets the global SQL CE Connection instance");
            //code.AppendLine("\t\tpublic static System.Data.SqlServerCe.SqlCeConnection Connection");
            //code.AppendLine("\t\t{");
            //code.AppendLine("\t\t\tget");
            //code.AppendLine("\t\t\t{");
            //code.AppendLine("\t\t\t\tlock (syncLock)");
            //code.AppendLine("\t\t\t\t{");
            //code.AppendLine("\t\t\t\t\tif (connectionInstance == null)");
            //code.AppendLine("\t\t\t\t\t\tconnectionInstance = new System.Data.SqlServerCe.SqlCeConnection(ConnectionString);");
            //code.AppendLine("\t\t\t\t\tif (connectionInstance.State != System.Data.ConnectionState.Open)");
            //code.AppendLine("\t\t\t\t\t\tconnectionInstance.Open();");
            //code.AppendLine("\t\t\t\t\treturn connectionInstance;");
            //code.AppendLine("\t\t\t\t}");
            //code.AppendLine("\t\t\t}");
            //code.AppendLine("\t\t\tset");
            //code.AppendLine("\t\t\t{");
            //code.AppendLine("\t\t\t\tlock (syncLock)");
            //code.AppendLine("\t\t\t\t\tconnectionInstance = value;");
            //code.AppendLine("\t\t\t}");
            //code.AppendLine("\t\t}");
            //code.AppendLine();

            //GenerateXmlDoc(2, "Create a SqlCeCommand instance using the global SQL CE Conection instance");
            //code.AppendLine("\t\tpublic static System.Data.SqlServerCe.SqlCeCommand CreateCommand()");
            //code.AppendLine("\t\t{");
            //code.AppendLine("\t\t\treturn Connection.CreateCommand();");
            //code.AppendLine("\t\t}");
            //code.AppendLine("\t}");
            //code.AppendLine();
            //code.AppendLine("\t#endregion");
            //code.AppendLine();
        }

        #region IDisposable Members

        public void Dispose()
        {
            provider.Dispose();
        }

        #endregion
    }

    public class CSharpCodeDomCodeGenerator : CodeDomCodeGenerator
    {
        public CSharpCodeDomCodeGenerator(SqlCeDatabase database)
            : base(database, new CSharpCodeProvider())
        {
        }

        public override string GetCode()
        {
            var options = new CodeGeneratorOptions();
            options.BracingStyle = "C";

            using (var writer = new StringWriter(code))
                provider.GenerateCodeFromCompileUnit(compileUnit, writer, options);
            return code.ToString();
        }
    }

    public class VisualBasicCodeDomCodeGenerator : CodeDomCodeGenerator
    {
        public VisualBasicCodeDomCodeGenerator(SqlCeDatabase database)
            : base(database, new VBCodeProvider())
        {
        }
    }
}
